# Generated from JavaLang.g4 by ANTLR 4.6
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3g")
        buf.write("\u0510\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\3\2\5\2\u00de")
        buf.write("\n\2\3\2\7\2\u00e1\n\2\f\2\16\2\u00e4\13\2\3\2\7\2\u00e7")
        buf.write("\n\2\f\2\16\2\u00ea\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3")
        buf.write("\4\5\4\u00f4\n\4\3\4\3\4\3\4\5\4\u00f9\n\4\3\4\3\4\3\5")
        buf.write("\7\5\u00fe\n\5\f\5\16\5\u0101\13\5\3\5\3\5\3\5\5\5\u0106")
        buf.write("\n\5\3\5\5\5\u0109\n\5\3\6\3\6\3\6\5\6\u010e\n\6\3\6\3")
        buf.write("\6\5\6\u0112\n\6\3\6\3\6\5\6\u0116\n\6\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u011e\n\7\3\7\3\7\3\b\3\b\5\b\u0124\n\b\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u012e\n\t\3\n\7\n\u0131")
        buf.write("\n\n\f\n\16\n\u0134\13\n\3\13\3\13\3\13\3\13\7\13\u013a")
        buf.write("\n\13\f\13\16\13\u013d\13\13\3\13\3\13\3\f\3\f\3\f\5\f")
        buf.write("\u0144\n\f\3\r\3\r\3\r\7\r\u0149\n\r\f\r\16\r\u014c\13")
        buf.write("\r\3\16\3\16\5\16\u0150\n\16\3\16\5\16\u0153\n\16\3\16")
        buf.write("\5\16\u0156\n\16\3\16\3\16\3\17\3\17\3\17\7\17\u015d\n")
        buf.write("\17\f\17\16\17\u0160\13\17\3\20\5\20\u0163\n\20\3\20\3")
        buf.write("\20\5\20\u0167\n\20\3\20\5\20\u016a\n\20\3\21\3\21\7\21")
        buf.write("\u016e\n\21\f\21\16\21\u0171\13\21\3\22\3\22\3\22\5\22")
        buf.write("\u0176\n\22\3\22\3\22\5\22\u017a\n\22\3\22\3\22\3\23\3")
        buf.write("\23\3\23\7\23\u0181\n\23\f\23\16\23\u0184\13\23\3\24\3")
        buf.write("\24\7\24\u0188\n\24\f\24\16\24\u018b\13\24\3\24\3\24\3")
        buf.write("\25\3\25\7\25\u0191\n\25\f\25\16\25\u0194\13\25\3\25\3")
        buf.write("\25\3\26\3\26\5\26\u019a\n\26\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u01a0\n\26\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01a8\n")
        buf.write("\27\3\30\3\30\3\30\3\30\3\30\7\30\u01af\n\30\f\30\16\30")
        buf.write("\u01b2\13\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u01bb")
        buf.write("\n\30\3\31\3\31\5\31\u01bf\n\31\3\31\3\31\5\31\u01c3\n")
        buf.write("\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\5\34\u01cd")
        buf.write("\n\34\3\34\3\34\3\34\3\34\5\34\u01d3\n\34\3\34\3\34\3")
        buf.write("\35\3\35\3\35\3\35\5\35\u01db\n\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\5\36\u01e4\n\36\3\37\3\37\3\37\3\37\3")
        buf.write(" \3 \3 \3 \5 \u01ee\n \3!\3!\3!\5!\u01f3\n!\3!\3!\5!\u01f7")
        buf.write("\n!\3\"\3\"\3\"\7\"\u01fc\n\"\f\"\16\"\u01ff\13\"\3\"")
        buf.write("\3\"\5\"\u0203\n\"\3\"\3\"\3#\3#\3#\5#\u020a\n#\3#\3#")
        buf.write("\3#\3$\3$\3$\5$\u0212\n$\3$\3$\3%\3%\3%\3&\3&\3&\7&\u021c")
        buf.write("\n&\f&\16&\u021f\13&\3\'\3\'\3\'\5\'\u0224\n\'\3(\3(\3")
        buf.write("(\7(\u0229\n(\f(\16(\u022c\13(\3)\3)\7)\u0230\n)\f)\16")
        buf.write(")\u0233\13)\3)\3)\3)\3*\3*\3*\7*\u023b\n*\f*\16*\u023e")
        buf.write("\13*\3+\3+\5+\u0242\n+\3,\3,\3,\3,\7,\u0248\n,\f,\16,")
        buf.write("\u024b\13,\3,\5,\u024e\n,\5,\u0250\n,\3,\3,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0260\n-\3.\3.\3/\3/\3\60")
        buf.write("\3\60\3\61\3\61\3\61\7\61\u026b\n\61\f\61\16\61\u026e")
        buf.write("\13\61\3\61\3\61\3\61\7\61\u0273\n\61\f\61\16\61\u0276")
        buf.write("\13\61\5\61\u0278\n\61\3\62\3\62\5\62\u027c\n\62\3\62")
        buf.write("\3\62\3\62\5\62\u0281\n\62\7\62\u0283\n\62\f\62\16\62")
        buf.write("\u0286\13\62\3\63\3\63\3\64\3\64\5\64\u028c\n\64\3\65")
        buf.write("\3\65\3\65\3\65\7\65\u0292\n\65\f\65\16\65\u0295\13\65")
        buf.write("\3\65\3\65\3\66\3\66\3\66\3\66\5\66\u029d\n\66\5\66\u029f")
        buf.write("\n\66\3\67\3\67\3\67\7\67\u02a4\n\67\f\67\16\67\u02a7")
        buf.write("\13\67\38\38\58\u02ab\n8\38\38\39\39\39\39\3:\3:\3:\5")
        buf.write(":\u02b6\n:\3:\3:\5:\u02ba\n:\3;\3;\3<\3<\5<\u02c0\n<\3")
        buf.write("<\7<\u02c3\n<\f<\16<\u02c6\13<\3<\3<\3=\5=\u02cb\n=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\5=\u02d4\n=\3=\3=\3=\3=\5=\u02da\n")
        buf.write("=\3>\3>\3>\7>\u02df\n>\f>\16>\u02e2\13>\3?\3?\3?\3?\3")
        buf.write("?\3?\5?\u02ea\n?\3@\3@\3A\3A\3B\6B\u02f1\nB\rB\16B\u02f2")
        buf.write("\3C\3C\3C\3C\3C\5C\u02fa\nC\3C\5C\u02fd\nC\3D\3D\3D\7")
        buf.write("D\u0302\nD\fD\16D\u0305\13D\3E\3E\3E\7E\u030a\nE\fE\16")
        buf.write("E\u030d\13E\3F\3F\3F\3F\3G\3G\3G\5G\u0316\nG\3H\3H\3H")
        buf.write("\3H\7H\u031c\nH\fH\16H\u031f\13H\5H\u0321\nH\3H\5H\u0324")
        buf.write("\nH\3H\3H\3I\3I\3I\3I\3I\3J\3J\7J\u032f\nJ\fJ\16J\u0332")
        buf.write("\13J\3J\3J\3K\3K\3K\3L\3L\3L\3L\3L\3L\5L\u033f\nL\3L\3")
        buf.write("L\5L\u0343\nL\3L\3L\5L\u0347\nL\3L\3L\5L\u034b\nL\5L\u034d")
        buf.write("\nL\3M\3M\5M\u0351\nM\3N\3N\3N\3N\5N\u0357\nN\3O\3O\3")
        buf.write("P\3P\3P\3Q\3Q\7Q\u0360\nQ\fQ\16Q\u0363\13Q\3Q\3Q\3R\3")
        buf.write("R\3R\3R\5R\u036b\nR\3S\3S\3S\3T\3T\3T\3T\3U\7U\u0375\n")
        buf.write("U\fU\16U\u0378\13U\3V\3V\3V\3V\3V\5V\u037f\nV\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\5V\u0388\nV\3V\3V\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u03a3")
        buf.write("\nV\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u03af\nV\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\5V\u03b8\nV\3V\3V\3V\5V\u03bd\nV\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\5V\u03c7\nV\3W\3W\7W\u03cb\nW\fW\16W")
        buf.write("\u03ce\13W\3X\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\7Z\u03dc")
        buf.write("\nZ\fZ\16Z\u03df\13Z\3Z\7Z\u03e2\nZ\fZ\16Z\u03e5\13Z\3")
        buf.write("Z\3Z\3[\6[\u03ea\n[\r[\16[\u03eb\3[\7[\u03ef\n[\f[\16")
        buf.write("[\u03f2\13[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5")
        buf.write("\\\u03fe\n\\\3]\3]\5]\u0402\n]\3]\3]\5]\u0406\n]\3]\3")
        buf.write("]\5]\u040a\n]\5]\u040c\n]\3^\3^\5^\u0410\n^\3_\3_\3_\3")
        buf.write("_\3_\3_\3`\3`\3a\3a\3a\3a\3b\3b\3b\7b\u0421\nb\fb\16b")
        buf.write("\u0424\13b\3c\3c\3d\3d\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\5e\u0437\ne\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\5e\u0447\ne\3e\3e\3e\3e\3e\3e\3e\3e\5e\u0451\n")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\5e\u0480\ne\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\5e\u048e\ne\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\5e\u0497\ne\3e\3e\3e\3e\3e\3e\3e\5e\u04a0\ne\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\5e\u04ad\ne\3e\3e\3e\3e\3e\3")
        buf.write("e\7e\u04b5\ne\fe\16e\u04b8\13e\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\3f\3f\3f\5f\u04c9\nf\3g\3g\3g\3g\3g\3g\3")
        buf.write("g\5g\u04d2\ng\5g\u04d4\ng\3h\3h\5h\u04d8\nh\3i\5i\u04db")
        buf.write("\ni\3i\3i\3i\3j\3j\3j\3j\3k\3k\3k\3k\7k\u04e8\nk\fk\16")
        buf.write("k\u04eb\13k\3k\3k\3k\3k\3k\3k\3k\7k\u04f4\nk\fk\16k\u04f7")
        buf.write("\13k\3k\3k\7k\u04fb\nk\fk\16k\u04fe\13k\5k\u0500\nk\3")
        buf.write("l\3l\5l\u0504\nl\3m\3m\3m\3m\3n\3n\5n\u050c\nn\3n\3n\3")
        buf.write("n\2\3\u00c8o\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\2\r\3\2\")\4\2\n\n++\4\2++//\3\2\\^\3\2\61\62\3")
        buf.write("\2EH\3\2IJ\4\2\b\bKL\3\2GH\3\2NO\3\2EF\u058b\2\u00dd\3")
        buf.write("\2\2\2\4\u00ed\3\2\2\2\6\u00f1\3\2\2\2\b\u0108\3\2\2\2")
        buf.write("\n\u010a\3\2\2\2\f\u0119\3\2\2\2\16\u0123\3\2\2\2\20\u012d")
        buf.write("\3\2\2\2\22\u0132\3\2\2\2\24\u0135\3\2\2\2\26\u0140\3")
        buf.write("\2\2\2\30\u0145\3\2\2\2\32\u014d\3\2\2\2\34\u0159\3\2")
        buf.write("\2\2\36\u0162\3\2\2\2 \u016b\3\2\2\2\"\u0172\3\2\2\2$")
        buf.write("\u017d\3\2\2\2&\u0185\3\2\2\2(\u018e\3\2\2\2*\u019f\3")
        buf.write("\2\2\2,\u01a7\3\2\2\2.\u01ba\3\2\2\2\60\u01be\3\2\2\2")
        buf.write("\62\u01c4\3\2\2\2\64\u01c7\3\2\2\2\66\u01cc\3\2\2\28\u01da")
        buf.write("\3\2\2\2:\u01e3\3\2\2\2<\u01e5\3\2\2\2>\u01ed\3\2\2\2")
        buf.write("@\u01ef\3\2\2\2B\u01f8\3\2\2\2D\u0206\3\2\2\2F\u020e\3")
        buf.write("\2\2\2H\u0215\3\2\2\2J\u0218\3\2\2\2L\u0220\3\2\2\2N\u0225")
        buf.write("\3\2\2\2P\u0231\3\2\2\2R\u0237\3\2\2\2T\u0241\3\2\2\2")
        buf.write("V\u0243\3\2\2\2X\u025f\3\2\2\2Z\u0261\3\2\2\2\\\u0263")
        buf.write("\3\2\2\2^\u0265\3\2\2\2`\u0277\3\2\2\2b\u0279\3\2\2\2")
        buf.write("d\u0287\3\2\2\2f\u028b\3\2\2\2h\u028d\3\2\2\2j\u029e\3")
        buf.write("\2\2\2l\u02a0\3\2\2\2n\u02a8\3\2\2\2p\u02ae\3\2\2\2r\u02b9")
        buf.write("\3\2\2\2t\u02bb\3\2\2\2v\u02bd\3\2\2\2x\u02d9\3\2\2\2")
        buf.write("z\u02db\3\2\2\2|\u02e9\3\2\2\2~\u02eb\3\2\2\2\u0080\u02ed")
        buf.write("\3\2\2\2\u0082\u02f0\3\2\2\2\u0084\u02f4\3\2\2\2\u0086")
        buf.write("\u02fe\3\2\2\2\u0088\u0306\3\2\2\2\u008a\u030e\3\2\2\2")
        buf.write("\u008c\u0315\3\2\2\2\u008e\u0317\3\2\2\2\u0090\u0327\3")
        buf.write("\2\2\2\u0092\u032c\3\2\2\2\u0094\u0335\3\2\2\2\u0096\u034c")
        buf.write("\3\2\2\2\u0098\u0350\3\2\2\2\u009a\u0352\3\2\2\2\u009c")
        buf.write("\u0358\3\2\2\2\u009e\u035a\3\2\2\2\u00a0\u035d\3\2\2\2")
        buf.write("\u00a2\u036a\3\2\2\2\u00a4\u036c\3\2\2\2\u00a6\u036f\3")
        buf.write("\2\2\2\u00a8\u0376\3\2\2\2\u00aa\u03c6\3\2\2\2\u00ac\u03c8")
        buf.write("\3\2\2\2\u00ae\u03cf\3\2\2\2\u00b0\u03d5\3\2\2\2\u00b2")
        buf.write("\u03d9\3\2\2\2\u00b4\u03e9\3\2\2\2\u00b6\u03fd\3\2\2\2")
        buf.write("\u00b8\u040b\3\2\2\2\u00ba\u040f\3\2\2\2\u00bc\u0411\3")
        buf.write("\2\2\2\u00be\u0417\3\2\2\2\u00c0\u0419\3\2\2\2\u00c2\u041d")
        buf.write("\3\2\2\2\u00c4\u0425\3\2\2\2\u00c6\u0427\3\2\2\2\u00c8")
        buf.write("\u0436\3\2\2\2\u00ca\u04c8\3\2\2\2\u00cc\u04d3\3\2\2\2")
        buf.write("\u00ce\u04d7\3\2\2\2\u00d0\u04da\3\2\2\2\u00d2\u04df\3")
        buf.write("\2\2\2\u00d4\u04e3\3\2\2\2\u00d6\u0501\3\2\2\2\u00d8\u0505")
        buf.write("\3\2\2\2\u00da\u0509\3\2\2\2\u00dc\u00de\5\4\3\2\u00dd")
        buf.write("\u00dc\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e2\3\2\2\2")
        buf.write("\u00df\u00e1\5\6\4\2\u00e0\u00df\3\2\2\2\u00e1\u00e4\3")
        buf.write("\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e8")
        buf.write("\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e5\u00e7\5\b\5\2\u00e6")
        buf.write("\u00e5\3\2\2\2\u00e7\u00ea\3\2\2\2\u00e8\u00e6\3\2\2\2")
        buf.write("\u00e8\u00e9\3\2\2\2\u00e9\u00eb\3\2\2\2\u00ea\u00e8\3")
        buf.write("\2\2\2\u00eb\u00ec\7\2\2\3\u00ec\3\3\2\2\2\u00ed\u00ee")
        buf.write("\7\3\2\2\u00ee\u00ef\5z>\2\u00ef\u00f0\7\4\2\2\u00f0\5")
        buf.write("\3\2\2\2\u00f1\u00f3\7\5\2\2\u00f2\u00f4\7\6\2\2\u00f3")
        buf.write("\u00f2\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\3\2\2\2")
        buf.write("\u00f5\u00f8\5z>\2\u00f6\u00f7\7\7\2\2\u00f7\u00f9\7\b")
        buf.write("\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa")
        buf.write("\3\2\2\2\u00fa\u00fb\7\4\2\2\u00fb\7\3\2\2\2\u00fc\u00fe")
        buf.write("\5\20\t\2\u00fd\u00fc\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff")
        buf.write("\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0105\3\2\2\2")
        buf.write("\u0101\u00ff\3\2\2\2\u0102\u0106\5\n\6\2\u0103\u0106\5")
        buf.write("\16\b\2\u0104\u0106\5\f\7\2\u0105\u0102\3\2\2\2\u0105")
        buf.write("\u0103\3\2\2\2\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2\2")
        buf.write("\u0107\u0109\7\4\2\2\u0108\u00ff\3\2\2\2\u0108\u0107\3")
        buf.write("\2\2\2\u0109\t\3\2\2\2\u010a\u010b\7\t\2\2\u010b\u010d")
        buf.write("\7d\2\2\u010c\u010e\5\24\13\2\u010d\u010c\3\2\2\2\u010d")
        buf.write("\u010e\3\2\2\2\u010e\u0111\3\2\2\2\u010f\u0110\7\n\2\2")
        buf.write("\u0110\u0112\5`\61\2\u0111\u010f\3\2\2\2\u0111\u0112\3")
        buf.write("\2\2\2\u0112\u0115\3\2\2\2\u0113\u0114\7\13\2\2\u0114")
        buf.write("\u0116\5$\23\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2")
        buf.write("\u0116\u0117\3\2\2\2\u0117\u0118\5&\24\2\u0118\13\3\2")
        buf.write("\2\2\u0119\u011a\7b\2\2\u011a\u011d\7d\2\2\u011b\u011c")
        buf.write("\7\13\2\2\u011c\u011e\5$\23\2\u011d\u011b\3\2\2\2\u011d")
        buf.write("\u011e\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0120\5\32\16")
        buf.write("\2\u0120\r\3\2\2\2\u0121\u0124\5\"\22\2\u0122\u0124\5")
        buf.write("\u0090I\2\u0123\u0121\3\2\2\2\u0123\u0122\3\2\2\2\u0124")
        buf.write("\17\3\2\2\2\u0125\u012e\5\u0084C\2\u0126\u012e\7\f\2\2")
        buf.write("\u0127\u012e\7\r\2\2\u0128\u012e\7\16\2\2\u0129\u012e")
        buf.write("\7\17\2\2\u012a\u012e\7\6\2\2\u012b\u012e\7\20\2\2\u012c")
        buf.write("\u012e\7\21\2\2\u012d\u0125\3\2\2\2\u012d\u0126\3\2\2")
        buf.write("\2\u012d\u0127\3\2\2\2\u012d\u0128\3\2\2\2\u012d\u0129")
        buf.write("\3\2\2\2\u012d\u012a\3\2\2\2\u012d\u012b\3\2\2\2\u012d")
        buf.write("\u012c\3\2\2\2\u012e\21\3\2\2\2\u012f\u0131\5X-\2\u0130")
        buf.write("\u012f\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130\3\2\2\2")
        buf.write("\u0132\u0133\3\2\2\2\u0133\23\3\2\2\2\u0134\u0132\3\2")
        buf.write("\2\2\u0135\u0136\7\22\2\2\u0136\u013b\5\26\f\2\u0137\u0138")
        buf.write("\7\23\2\2\u0138\u013a\5\26\f\2\u0139\u0137\3\2\2\2\u013a")
        buf.write("\u013d\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2")
        buf.write("\u013c\u013e\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u013f\7")
        buf.write("\24\2\2\u013f\25\3\2\2\2\u0140\u0143\7d\2\2\u0141\u0142")
        buf.write("\7\n\2\2\u0142\u0144\5\30\r\2\u0143\u0141\3\2\2\2\u0143")
        buf.write("\u0144\3\2\2\2\u0144\27\3\2\2\2\u0145\u014a\5`\61\2\u0146")
        buf.write("\u0147\7\25\2\2\u0147\u0149\5`\61\2\u0148\u0146\3\2\2")
        buf.write("\2\u0149\u014c\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b")
        buf.write("\3\2\2\2\u014b\31\3\2\2\2\u014c\u014a\3\2\2\2\u014d\u014f")
        buf.write("\7\26\2\2\u014e\u0150\5\34\17\2\u014f\u014e\3\2\2\2\u014f")
        buf.write("\u0150\3\2\2\2\u0150\u0152\3\2\2\2\u0151\u0153\7\23\2")
        buf.write("\2\u0152\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0155")
        buf.write("\3\2\2\2\u0154\u0156\5 \21\2\u0155\u0154\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158\7\27\2")
        buf.write("\2\u0158\33\3\2\2\2\u0159\u015e\5\36\20\2\u015a\u015b")
        buf.write("\7\23\2\2\u015b\u015d\5\36\20\2\u015c\u015a\3\2\2\2\u015d")
        buf.write("\u0160\3\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2")
        buf.write("\u015f\35\3\2\2\2\u0160\u015e\3\2\2\2\u0161\u0163\5\u0082")
        buf.write("B\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164")
        buf.write("\3\2\2\2\u0164\u0166\7d\2\2\u0165\u0167\5\u00dan\2\u0166")
        buf.write("\u0165\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0169\3\2\2\2")
        buf.write("\u0168\u016a\5&\24\2\u0169\u0168\3\2\2\2\u0169\u016a\3")
        buf.write("\2\2\2\u016a\37\3\2\2\2\u016b\u016f\7\4\2\2\u016c\u016e")
        buf.write("\5*\26\2\u016d\u016c\3\2\2\2\u016e\u0171\3\2\2\2\u016f")
        buf.write("\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170!\3\2\2\2\u0171")
        buf.write("\u016f\3\2\2\2\u0172\u0173\7\30\2\2\u0173\u0175\7d\2\2")
        buf.write("\u0174\u0176\5\24\13\2\u0175\u0174\3\2\2\2\u0175\u0176")
        buf.write("\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0178\7\n\2\2\u0178")
        buf.write("\u017a\5$\23\2\u0179\u0177\3\2\2\2\u0179\u017a\3\2\2\2")
        buf.write("\u017a\u017b\3\2\2\2\u017b\u017c\5(\25\2\u017c#\3\2\2")
        buf.write("\2\u017d\u0182\5`\61\2\u017e\u017f\7\23\2\2\u017f\u0181")
        buf.write("\5`\61\2\u0180\u017e\3\2\2\2\u0181\u0184\3\2\2\2\u0182")
        buf.write("\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183%\3\2\2\2\u0184")
        buf.write("\u0182\3\2\2\2\u0185\u0189\7\26\2\2\u0186\u0188\5*\26")
        buf.write("\2\u0187\u0186\3\2\2\2\u0188\u018b\3\2\2\2\u0189\u0187")
        buf.write("\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018c\3\2\2\2\u018b")
        buf.write("\u0189\3\2\2\2\u018c\u018d\7\27\2\2\u018d\'\3\2\2\2\u018e")
        buf.write("\u0192\7\26\2\2\u018f\u0191\58\35\2\u0190\u018f\3\2\2")
        buf.write("\2\u0191\u0194\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193")
        buf.write("\3\2\2\2\u0193\u0195\3\2\2\2\u0194\u0192\3\2\2\2\u0195")
        buf.write("\u0196\7\27\2\2\u0196)\3\2\2\2\u0197\u01a0\7\4\2\2\u0198")
        buf.write("\u019a\7\6\2\2\u0199\u0198\3\2\2\2\u0199\u019a\3\2\2\2")
        buf.write("\u019a\u019b\3\2\2\2\u019b\u01a0\5\u00a0Q\2\u019c\u019d")
        buf.write("\5\22\n\2\u019d\u019e\5,\27\2\u019e\u01a0\3\2\2\2\u019f")
        buf.write("\u0197\3\2\2\2\u019f\u0199\3\2\2\2\u019f\u019c\3\2\2\2")
        buf.write("\u01a0+\3\2\2\2\u01a1\u01a8\5\62\32\2\u01a2\u01a8\5.\30")
        buf.write("\2\u01a3\u01a8\5\64\33\2\u01a4\u01a8\5\66\34\2\u01a5\u01a8")
        buf.write("\5\16\b\2\u01a6\u01a8\5\n\6\2\u01a7\u01a1\3\2\2\2\u01a7")
        buf.write("\u01a2\3\2\2\2\u01a7\u01a3\3\2\2\2\u01a7\u01a4\3\2\2\2")
        buf.write("\u01a7\u01a5\3\2\2\2\u01a7\u01a6\3\2\2\2\u01a8-\3\2\2")
        buf.write("\2\u01a9\u01aa\5`\61\2\u01aa\u01ab\7d\2\2\u01ab\u01b0")
        buf.write("\5n8\2\u01ac\u01ad\7\31\2\2\u01ad\u01af\7\32\2\2\u01ae")
        buf.write("\u01ac\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2")
        buf.write("\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u01b0\3")
        buf.write("\2\2\2\u01b3\u01b4\5\60\31\2\u01b4\u01bb\3\2\2\2\u01b5")
        buf.write("\u01b6\7\33\2\2\u01b6\u01b7\7d\2\2\u01b7\u01b8\5n8\2\u01b8")
        buf.write("\u01b9\5\60\31\2\u01b9\u01bb\3\2\2\2\u01ba\u01a9\3\2\2")
        buf.write("\2\u01ba\u01b5\3\2\2\2\u01bb/\3\2\2\2\u01bc\u01bd\7\34")
        buf.write("\2\2\u01bd\u01bf\5l\67\2\u01be\u01bc\3\2\2\2\u01be\u01bf")
        buf.write("\3\2\2\2\u01bf\u01c2\3\2\2\2\u01c0\u01c3\5t;\2\u01c1\u01c3")
        buf.write("\7\4\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c1\3\2\2\2\u01c3")
        buf.write("\61\3\2\2\2\u01c4\u01c5\5\24\13\2\u01c5\u01c6\5.\30\2")
        buf.write("\u01c6\63\3\2\2\2\u01c7\u01c8\5`\61\2\u01c8\u01c9\5J&")
        buf.write("\2\u01c9\u01ca\7\4\2\2\u01ca\65\3\2\2\2\u01cb\u01cd\5")
        buf.write("\24\13\2\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd")
        buf.write("\u01ce\3\2\2\2\u01ce\u01cf\7d\2\2\u01cf\u01d2\5n8\2\u01d0")
        buf.write("\u01d1\7\34\2\2\u01d1\u01d3\5l\67\2\u01d2\u01d0\3\2\2")
        buf.write("\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5")
        buf.write("\5v<\2\u01d5\67\3\2\2\2\u01d6\u01d7\5\22\n\2\u01d7\u01d8")
        buf.write("\5:\36\2\u01d8\u01db\3\2\2\2\u01d9\u01db\7\4\2\2\u01da")
        buf.write("\u01d6\3\2\2\2\u01da\u01d9\3\2\2\2\u01db9\3\2\2\2\u01dc")
        buf.write("\u01e4\5<\37\2\u01dd\u01e4\5D#\2\u01de\u01df\7\33\2\2")
        buf.write("\u01df\u01e0\7d\2\2\u01e0\u01e4\5F$\2\u01e1\u01e4\5\16")
        buf.write("\b\2\u01e2\u01e4\5\n\6\2\u01e3\u01dc\3\2\2\2\u01e3\u01dd")
        buf.write("\3\2\2\2\u01e3\u01de\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3")
        buf.write("\u01e2\3\2\2\2\u01e4;\3\2\2\2\u01e5\u01e6\5`\61\2\u01e6")
        buf.write("\u01e7\7d\2\2\u01e7\u01e8\5> \2\u01e8=\3\2\2\2\u01e9\u01ea")
        buf.write("\5N(\2\u01ea\u01eb\7\4\2\2\u01eb\u01ee\3\2\2\2\u01ec\u01ee")
        buf.write("\5B\"\2\u01ed\u01e9\3\2\2\2\u01ed\u01ec\3\2\2\2\u01ee")
        buf.write("?\3\2\2\2\u01ef\u01f2\5n8\2\u01f0\u01f1\7\34\2\2\u01f1")
        buf.write("\u01f3\5l\67\2\u01f2\u01f0\3\2\2\2\u01f2\u01f3\3\2\2\2")
        buf.write("\u01f3\u01f6\3\2\2\2\u01f4\u01f7\5t;\2\u01f5\u01f7\7\4")
        buf.write("\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f5\3\2\2\2\u01f7A\3")
        buf.write("\2\2\2\u01f8\u01fd\5n8\2\u01f9\u01fa\7\31\2\2\u01fa\u01fc")
        buf.write("\7\32\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd")
        buf.write("\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0202\3\2\2\2")
        buf.write("\u01ff\u01fd\3\2\2\2\u0200\u0201\7\34\2\2\u0201\u0203")
        buf.write("\5l\67\2\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0204\3\2\2\2\u0204\u0205\7\4\2\2\u0205C\3\2\2\2\u0206")
        buf.write("\u0209\5\24\13\2\u0207\u020a\5`\61\2\u0208\u020a\7\33")
        buf.write("\2\2\u0209\u0207\3\2\2\2\u0209\u0208\3\2\2\2\u020a\u020b")
        buf.write("\3\2\2\2\u020b\u020c\7d\2\2\u020c\u020d\5B\"\2\u020dE")
        buf.write("\3\2\2\2\u020e\u0211\5n8\2\u020f\u0210\7\34\2\2\u0210")
        buf.write("\u0212\5l\67\2\u0211\u020f\3\2\2\2\u0211\u0212\3\2\2\2")
        buf.write("\u0212\u0213\3\2\2\2\u0213\u0214\7\4\2\2\u0214G\3\2\2")
        buf.write("\2\u0215\u0216\7d\2\2\u0216\u0217\5P)\2\u0217I\3\2\2\2")
        buf.write("\u0218\u021d\5L\'\2\u0219\u021a\7\23\2\2\u021a\u021c\5")
        buf.write("L\'\2\u021b\u0219\3\2\2\2\u021c\u021f\3\2\2\2\u021d\u021b")
        buf.write("\3\2\2\2\u021d\u021e\3\2\2\2\u021eK\3\2\2\2\u021f\u021d")
        buf.write("\3\2\2\2\u0220\u0223\5R*\2\u0221\u0222\7\35\2\2\u0222")
        buf.write("\u0224\5T+\2\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224")
        buf.write("M\3\2\2\2\u0225\u022a\5P)\2\u0226\u0227\7\23\2\2\u0227")
        buf.write("\u0229\5H%\2\u0228\u0226\3\2\2\2\u0229\u022c\3\2\2\2\u022a")
        buf.write("\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022bO\3\2\2\2\u022c")
        buf.write("\u022a\3\2\2\2\u022d\u022e\7\31\2\2\u022e\u0230\7\32\2")
        buf.write("\2\u022f\u022d\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f")
        buf.write("\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0234\3\2\2\2\u0233")
        buf.write("\u0231\3\2\2\2\u0234\u0235\7\35\2\2\u0235\u0236\5T+\2")
        buf.write("\u0236Q\3\2\2\2\u0237\u023c\7d\2\2\u0238\u0239\7\31\2")
        buf.write("\2\u0239\u023b\7\32\2\2\u023a\u0238\3\2\2\2\u023b\u023e")
        buf.write("\3\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2\u023d")
        buf.write("S\3\2\2\2\u023e\u023c\3\2\2\2\u023f\u0242\5V,\2\u0240")
        buf.write("\u0242\5\u00c8e\2\u0241\u023f\3\2\2\2\u0241\u0240\3\2")
        buf.write("\2\2\u0242U\3\2\2\2\u0243\u024f\7\26\2\2\u0244\u0249\5")
        buf.write("T+\2\u0245\u0246\7\23\2\2\u0246\u0248\5T+\2\u0247\u0245")
        buf.write("\3\2\2\2\u0248\u024b\3\2\2\2\u0249\u0247\3\2\2\2\u0249")
        buf.write("\u024a\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2")
        buf.write("\u024c\u024e\7\23\2\2\u024d\u024c\3\2\2\2\u024d\u024e")
        buf.write("\3\2\2\2\u024e\u0250\3\2\2\2\u024f\u0244\3\2\2\2\u024f")
        buf.write("\u0250\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252\7\27\2")
        buf.write("\2\u0252W\3\2\2\2\u0253\u0260\5\u0084C\2\u0254\u0260\7")
        buf.write("\f\2\2\u0255\u0260\7\r\2\2\u0256\u0260\7\16\2\2\u0257")
        buf.write("\u0260\7\6\2\2\u0258\u0260\7\17\2\2\u0259\u0260\7\20\2")
        buf.write("\2\u025a\u0260\7\36\2\2\u025b\u0260\7\37\2\2\u025c\u0260")
        buf.write("\7 \2\2\u025d\u0260\7!\2\2\u025e\u0260\7\21\2\2\u025f")
        buf.write("\u0253\3\2\2\2\u025f\u0254\3\2\2\2\u025f\u0255\3\2\2\2")
        buf.write("\u025f\u0256\3\2\2\2\u025f\u0257\3\2\2\2\u025f\u0258\3")
        buf.write("\2\2\2\u025f\u0259\3\2\2\2\u025f\u025a\3\2\2\2\u025f\u025b")
        buf.write("\3\2\2\2\u025f\u025c\3\2\2\2\u025f\u025d\3\2\2\2\u025f")
        buf.write("\u025e\3\2\2\2\u0260Y\3\2\2\2\u0261\u0262\5z>\2\u0262")
        buf.write("[\3\2\2\2\u0263\u0264\7d\2\2\u0264]\3\2\2\2\u0265\u0266")
        buf.write("\5z>\2\u0266_\3\2\2\2\u0267\u026c\5b\62\2\u0268\u0269")
        buf.write("\7\31\2\2\u0269\u026b\7\32\2\2\u026a\u0268\3\2\2\2\u026b")
        buf.write("\u026e\3\2\2\2\u026c\u026a\3\2\2\2\u026c\u026d\3\2\2\2")
        buf.write("\u026d\u0278\3\2\2\2\u026e\u026c\3\2\2\2\u026f\u0274\5")
        buf.write("d\63\2\u0270\u0271\7\31\2\2\u0271\u0273\7\32\2\2\u0272")
        buf.write("\u0270\3\2\2\2\u0273\u0276\3\2\2\2\u0274\u0272\3\2\2\2")
        buf.write("\u0274\u0275\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0274\3")
        buf.write("\2\2\2\u0277\u0267\3\2\2\2\u0277\u026f\3\2\2\2\u0278a")
        buf.write("\3\2\2\2\u0279\u027b\7d\2\2\u027a\u027c\5h\65\2\u027b")
        buf.write("\u027a\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u0284\3\2\2\2")
        buf.write("\u027d\u027e\7\7\2\2\u027e\u0280\7d\2\2\u027f\u0281\5")
        buf.write("h\65\2\u0280\u027f\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0283")
        buf.write("\3\2\2\2\u0282\u027d\3\2\2\2\u0283\u0286\3\2\2\2\u0284")
        buf.write("\u0282\3\2\2\2\u0284\u0285\3\2\2\2\u0285c\3\2\2\2\u0286")
        buf.write("\u0284\3\2\2\2\u0287\u0288\t\2\2\2\u0288e\3\2\2\2\u0289")
        buf.write("\u028c\7\20\2\2\u028a\u028c\5\u0084C\2\u028b\u0289\3\2")
        buf.write("\2\2\u028b\u028a\3\2\2\2\u028cg\3\2\2\2\u028d\u028e\7")
        buf.write("\22\2\2\u028e\u0293\5j\66\2\u028f\u0290\7\23\2\2\u0290")
        buf.write("\u0292\5j\66\2\u0291\u028f\3\2\2\2\u0292\u0295\3\2\2\2")
        buf.write("\u0293\u0291\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0296\3")
        buf.write("\2\2\2\u0295\u0293\3\2\2\2\u0296\u0297\7\24\2\2\u0297")
        buf.write("i\3\2\2\2\u0298\u029f\5`\61\2\u0299\u029c\7*\2\2\u029a")
        buf.write("\u029b\t\3\2\2\u029b\u029d\5`\61\2\u029c\u029a\3\2\2\2")
        buf.write("\u029c\u029d\3\2\2\2\u029d\u029f\3\2\2\2\u029e\u0298\3")
        buf.write("\2\2\2\u029e\u0299\3\2\2\2\u029fk\3\2\2\2\u02a0\u02a5")
        buf.write("\5z>\2\u02a1\u02a2\7\23\2\2\u02a2\u02a4\5z>\2\u02a3\u02a1")
        buf.write("\3\2\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a5")
        buf.write("\u02a6\3\2\2\2\u02a6m\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a8")
        buf.write("\u02aa\7,\2\2\u02a9\u02ab\5p9\2\u02aa\u02a9\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad\7-\2\2")
        buf.write("\u02ado\3\2\2\2\u02ae\u02af\5\u00a8U\2\u02af\u02b0\5`")
        buf.write("\61\2\u02b0\u02b1\5r:\2\u02b1q\3\2\2\2\u02b2\u02b5\5R")
        buf.write("*\2\u02b3\u02b4\7\23\2\2\u02b4\u02b6\5p9\2\u02b5\u02b3")
        buf.write("\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02ba\3\2\2\2\u02b7")
        buf.write("\u02b8\7.\2\2\u02b8\u02ba\5R*\2\u02b9\u02b2\3\2\2\2\u02b9")
        buf.write("\u02b7\3\2\2\2\u02bas\3\2\2\2\u02bb\u02bc\5\u00a0Q\2\u02bc")
        buf.write("u\3\2\2\2\u02bd\u02bf\7\26\2\2\u02be\u02c0\5x=\2\u02bf")
        buf.write("\u02be\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c4\3\2\2\2")
        buf.write("\u02c1\u02c3\5\u00a2R\2\u02c2\u02c1\3\2\2\2\u02c3\u02c6")
        buf.write("\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5")
        buf.write("\u02c7\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c7\u02c8\7\27\2")
        buf.write("\2\u02c8w\3\2\2\2\u02c9\u02cb\5\u00d8m\2\u02ca\u02c9\3")
        buf.write("\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd")
        buf.write("\t\4\2\2\u02cd\u02ce\5\u00dan\2\u02ce\u02cf\7\4\2\2\u02cf")
        buf.write("\u02da\3\2\2\2\u02d0\u02d1\5\u00caf\2\u02d1\u02d3\7\7")
        buf.write("\2\2\u02d2\u02d4\5\u00d8m\2\u02d3\u02d2\3\2\2\2\u02d3")
        buf.write("\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\7+\2\2")
        buf.write("\u02d6\u02d7\5\u00dan\2\u02d7\u02d8\7\4\2\2\u02d8\u02da")
        buf.write("\3\2\2\2\u02d9\u02ca\3\2\2\2\u02d9\u02d0\3\2\2\2\u02da")
        buf.write("y\3\2\2\2\u02db\u02e0\7d\2\2\u02dc\u02dd\7\7\2\2\u02dd")
        buf.write("\u02df\7d\2\2\u02de\u02dc\3\2\2\2\u02df\u02e2\3\2\2\2")
        buf.write("\u02e0\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1{\3\2\2")
        buf.write("\2\u02e2\u02e0\3\2\2\2\u02e3\u02ea\5~@\2\u02e4\u02ea\7")
        buf.write("_\2\2\u02e5\u02ea\7`\2\2\u02e6\u02ea\7a\2\2\u02e7\u02ea")
        buf.write("\5\u0080A\2\u02e8\u02ea\7\60\2\2\u02e9\u02e3\3\2\2\2\u02e9")
        buf.write("\u02e4\3\2\2\2\u02e9\u02e5\3\2\2\2\u02e9\u02e6\3\2\2\2")
        buf.write("\u02e9\u02e7\3\2\2\2\u02e9\u02e8\3\2\2\2\u02ea}\3\2\2")
        buf.write("\2\u02eb\u02ec\t\5\2\2\u02ec\177\3\2\2\2\u02ed\u02ee\t")
        buf.write("\6\2\2\u02ee\u0081\3\2\2\2\u02ef\u02f1\5\u0084C\2\u02f0")
        buf.write("\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f0\3\2\2\2")
        buf.write("\u02f2\u02f3\3\2\2\2\u02f3\u0083\3\2\2\2\u02f4\u02f5\7")
        buf.write("\63\2\2\u02f5\u02fc\5\u0086D\2\u02f6\u02f9\7,\2\2\u02f7")
        buf.write("\u02fa\5\u0088E\2\u02f8\u02fa\5\u008cG\2\u02f9\u02f7\3")
        buf.write("\2\2\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fd\7-\2\2\u02fc\u02f6\3\2\2\2\u02fc")
        buf.write("\u02fd\3\2\2\2\u02fd\u0085\3\2\2\2\u02fe\u0303\7d\2\2")
        buf.write("\u02ff\u0300\7\7\2\2\u0300\u0302\7d\2\2\u0301\u02ff\3")
        buf.write("\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u0087\3\2\2\2\u0305\u0303\3\2\2\2\u0306")
        buf.write("\u030b\5\u008aF\2\u0307\u0308\7\23\2\2\u0308\u030a\5\u008a")
        buf.write("F\2\u0309\u0307\3\2\2\2\u030a\u030d\3\2\2\2\u030b\u0309")
        buf.write("\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u0089\3\2\2\2\u030d")
        buf.write("\u030b\3\2\2\2\u030e\u030f\7d\2\2\u030f\u0310\7\35\2\2")
        buf.write("\u0310\u0311\5\u008cG\2\u0311\u008b\3\2\2\2\u0312\u0316")
        buf.write("\5\u00c8e\2\u0313\u0316\5\u0084C\2\u0314\u0316\5\u008e")
        buf.write("H\2\u0315\u0312\3\2\2\2\u0315\u0313\3\2\2\2\u0315\u0314")
        buf.write("\3\2\2\2\u0316\u008d\3\2\2\2\u0317\u0320\7\26\2\2\u0318")
        buf.write("\u031d\5\u008cG\2\u0319\u031a\7\23\2\2\u031a\u031c\5\u008c")
        buf.write("G\2\u031b\u0319\3\2\2\2\u031c\u031f\3\2\2\2\u031d\u031b")
        buf.write("\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0321\3\2\2\2\u031f")
        buf.write("\u031d\3\2\2\2\u0320\u0318\3\2\2\2\u0320\u0321\3\2\2\2")
        buf.write("\u0321\u0323\3\2\2\2\u0322\u0324\7\23\2\2\u0323\u0322")
        buf.write("\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write("\u0326\7\27\2\2\u0326\u008f\3\2\2\2\u0327\u0328\7\63\2")
        buf.write("\2\u0328\u0329\7\30\2\2\u0329\u032a\7d\2\2\u032a\u032b")
        buf.write("\5\u0092J\2\u032b\u0091\3\2\2\2\u032c\u0330\7\26\2\2\u032d")
        buf.write("\u032f\5\u0094K\2\u032e\u032d\3\2\2\2\u032f\u0332\3\2")
        buf.write("\2\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0333")
        buf.write("\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0334\7\27\2\2\u0334")
        buf.write("\u0093\3\2\2\2\u0335\u0336\5\22\n\2\u0336\u0337\5\u0096")
        buf.write("L\2\u0337\u0095\3\2\2\2\u0338\u0339\5`\61\2\u0339\u033a")
        buf.write("\5\u0098M\2\u033a\u033b\7\4\2\2\u033b\u034d\3\2\2\2\u033c")
        buf.write("\u033e\5\n\6\2\u033d\u033f\7\4\2\2\u033e\u033d\3\2\2\2")
        buf.write("\u033e\u033f\3\2\2\2\u033f\u034d\3\2\2\2\u0340\u0342\5")
        buf.write("\"\22\2\u0341\u0343\7\4\2\2\u0342\u0341\3\2\2\2\u0342")
        buf.write("\u0343\3\2\2\2\u0343\u034d\3\2\2\2\u0344\u0346\5\f\7\2")
        buf.write("\u0345\u0347\7\4\2\2\u0346\u0345\3\2\2\2\u0346\u0347\3")
        buf.write("\2\2\2\u0347\u034d\3\2\2\2\u0348\u034a\5\u0090I\2\u0349")
        buf.write("\u034b\7\4\2\2\u034a\u0349\3\2\2\2\u034a\u034b\3\2\2\2")
        buf.write("\u034b\u034d\3\2\2\2\u034c\u0338\3\2\2\2\u034c\u033c\3")
        buf.write("\2\2\2\u034c\u0340\3\2\2\2\u034c\u0344\3\2\2\2\u034c\u0348")
        buf.write("\3\2\2\2\u034d\u0097\3\2\2\2\u034e\u0351\5\u009aN\2\u034f")
        buf.write("\u0351\5\u009cO\2\u0350\u034e\3\2\2\2\u0350\u034f\3\2")
        buf.write("\2\2\u0351\u0099\3\2\2\2\u0352\u0353\7d\2\2\u0353\u0354")
        buf.write("\7,\2\2\u0354\u0356\7-\2\2\u0355\u0357\5\u009eP\2\u0356")
        buf.write("\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u009b\3\2\2\2")
        buf.write("\u0358\u0359\5J&\2\u0359\u009d\3\2\2\2\u035a\u035b\7\64")
        buf.write("\2\2\u035b\u035c\5\u008cG\2\u035c\u009f\3\2\2\2\u035d")
        buf.write("\u0361\7\26\2\2\u035e\u0360\5\u00a2R\2\u035f\u035e\3\2")
        buf.write("\2\2\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2\u0361\u0362")
        buf.write("\3\2\2\2\u0362\u0364\3\2\2\2\u0363\u0361\3\2\2\2\u0364")
        buf.write("\u0365\7\27\2\2\u0365\u00a1\3\2\2\2\u0366\u036b\5\u00a4")
        buf.write("S\2\u0367\u036b\5\n\6\2\u0368\u036b\5\16\b\2\u0369\u036b")
        buf.write("\5\u00aaV\2\u036a\u0366\3\2\2\2\u036a\u0367\3\2\2\2\u036a")
        buf.write("\u0368\3\2\2\2\u036a\u0369\3\2\2\2\u036b\u00a3\3\2\2\2")
        buf.write("\u036c\u036d\5\u00a6T\2\u036d\u036e\7\4\2\2\u036e\u00a5")
        buf.write("\3\2\2\2\u036f\u0370\5\u00a8U\2\u0370\u0371\5`\61\2\u0371")
        buf.write("\u0372\5J&\2\u0372\u00a7\3\2\2\2\u0373\u0375\5f\64\2\u0374")
        buf.write("\u0373\3\2\2\2\u0375\u0378\3\2\2\2\u0376\u0374\3\2\2\2")
        buf.write("\u0376\u0377\3\2\2\2\u0377\u00a9\3\2\2\2\u0378\u0376\3")
        buf.write("\2\2\2\u0379\u03c7\5\u00a0Q\2\u037a\u037b\7c\2\2\u037b")
        buf.write("\u037e\5\u00c8e\2\u037c\u037d\7\65\2\2\u037d\u037f\5\u00c8")
        buf.write("e\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380")
        buf.write("\3\2\2\2\u0380\u0381\7\4\2\2\u0381\u03c7\3\2\2\2\u0382")
        buf.write("\u0383\7\66\2\2\u0383\u0384\5\u00c0a\2\u0384\u0387\5\u00aa")
        buf.write("V\2\u0385\u0386\7\67\2\2\u0386\u0388\5\u00aaV\2\u0387")
        buf.write("\u0385\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u03c7\3\2\2\2")
        buf.write("\u0389\u038a\78\2\2\u038a\u038b\7,\2\2\u038b\u038c\5\u00b8")
        buf.write("]\2\u038c\u038d\7-\2\2\u038d\u038e\5\u00aaV\2\u038e\u03c7")
        buf.write("\3\2\2\2\u038f\u0390\79\2\2\u0390\u0391\5\u00c0a\2\u0391")
        buf.write("\u0392\5\u00aaV\2\u0392\u03c7\3\2\2\2\u0393\u0394\7:\2")
        buf.write("\2\u0394\u0395\5\u00aaV\2\u0395\u0396\79\2\2\u0396\u0397")
        buf.write("\5\u00c0a\2\u0397\u0398\7\4\2\2\u0398\u03c7\3\2\2\2\u0399")
        buf.write("\u039a\7;\2\2\u039a\u03a2\5\u00a0Q\2\u039b\u039c\5\u00ac")
        buf.write("W\2\u039c\u039d\7<\2\2\u039d\u039e\5\u00a0Q\2\u039e\u03a3")
        buf.write("\3\2\2\2\u039f\u03a3\5\u00acW\2\u03a0\u03a1\7<\2\2\u03a1")
        buf.write("\u03a3\5\u00a0Q\2\u03a2\u039b\3\2\2\2\u03a2\u039f\3\2")
        buf.write("\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03c7\3\2\2\2\u03a4\u03a5")
        buf.write("\7=\2\2\u03a5\u03a6\5\u00c0a\2\u03a6\u03a7\5\u00b2Z\2")
        buf.write("\u03a7\u03c7\3\2\2\2\u03a8\u03a9\7\37\2\2\u03a9\u03aa")
        buf.write("\5\u00c0a\2\u03aa\u03ab\5\u00a0Q\2\u03ab\u03c7\3\2\2\2")
        buf.write("\u03ac\u03ae\7>\2\2\u03ad\u03af\5\u00c8e\2\u03ae\u03ad")
        buf.write("\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("\u03c7\7\4\2\2\u03b1\u03b2\7?\2\2\u03b2\u03b3\5\u00c8")
        buf.write("e\2\u03b3\u03b4\7\4\2\2\u03b4\u03c7\3\2\2\2\u03b5\u03b7")
        buf.write("\7@\2\2\u03b6\u03b8\7d\2\2\u03b7\u03b6\3\2\2\2\u03b7\u03b8")
        buf.write("\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03c7\7\4\2\2\u03ba")
        buf.write("\u03bc\7A\2\2\u03bb\u03bd\7d\2\2\u03bc\u03bb\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c7\7\4\2\2")
        buf.write("\u03bf\u03c7\7\4\2\2\u03c0\u03c1\5\u00c4c\2\u03c1\u03c2")
        buf.write("\7\4\2\2\u03c2\u03c7\3\2\2\2\u03c3\u03c4\7d\2\2\u03c4")
        buf.write("\u03c5\7\65\2\2\u03c5\u03c7\5\u00aaV\2\u03c6\u0379\3\2")
        buf.write("\2\2\u03c6\u037a\3\2\2\2\u03c6\u0382\3\2\2\2\u03c6\u0389")
        buf.write("\3\2\2\2\u03c6\u038f\3\2\2\2\u03c6\u0393\3\2\2\2\u03c6")
        buf.write("\u0399\3\2\2\2\u03c6\u03a4\3\2\2\2\u03c6\u03a8\3\2\2\2")
        buf.write("\u03c6\u03ac\3\2\2\2\u03c6\u03b1\3\2\2\2\u03c6\u03b5\3")
        buf.write("\2\2\2\u03c6\u03ba\3\2\2\2\u03c6\u03bf\3\2\2\2\u03c6\u03c0")
        buf.write("\3\2\2\2\u03c6\u03c3\3\2\2\2\u03c7\u00ab\3\2\2\2\u03c8")
        buf.write("\u03cc\5\u00aeX\2\u03c9\u03cb\5\u00aeX\2\u03ca\u03c9\3")
        buf.write("\2\2\2\u03cb\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u00ad\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf")
        buf.write("\u03d0\7B\2\2\u03d0\u03d1\7,\2\2\u03d1\u03d2\5\u00b0Y")
        buf.write("\2\u03d2\u03d3\7-\2\2\u03d3\u03d4\5\u00a0Q\2\u03d4\u00af")
        buf.write("\3\2\2\2\u03d5\u03d6\5\u00a8U\2\u03d6\u03d7\5`\61\2\u03d7")
        buf.write("\u03d8\5R*\2\u03d8\u00b1\3\2\2\2\u03d9\u03dd\7\26\2\2")
        buf.write("\u03da\u03dc\5\u00b4[\2\u03db\u03da\3\2\2\2\u03dc\u03df")
        buf.write("\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de")
        buf.write("\u03e3\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0\u03e2\5\u00b6")
        buf.write("\\\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1")
        buf.write("\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e6\3\2\2\2\u03e5")
        buf.write("\u03e3\3\2\2\2\u03e6\u03e7\7\27\2\2\u03e7\u00b3\3\2\2")
        buf.write("\2\u03e8\u03ea\5\u00b6\\\2\u03e9\u03e8\3\2\2\2\u03ea\u03eb")
        buf.write("\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec")
        buf.write("\u03f0\3\2\2\2\u03ed\u03ef\5\u00a2R\2\u03ee\u03ed\3\2")
        buf.write("\2\2\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1")
        buf.write("\3\2\2\2\u03f1\u00b5\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f3")
        buf.write("\u03f4\7C\2\2\u03f4\u03f5\5\u00c6d\2\u03f5\u03f6\7\65")
        buf.write("\2\2\u03f6\u03fe\3\2\2\2\u03f7\u03f8\7C\2\2\u03f8\u03f9")
        buf.write("\5\\/\2\u03f9\u03fa\7\65\2\2\u03fa\u03fe\3\2\2\2\u03fb")
        buf.write("\u03fc\7\64\2\2\u03fc\u03fe\7\65\2\2\u03fd\u03f3\3\2\2")
        buf.write("\2\u03fd\u03f7\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe\u00b7")
        buf.write("\3\2\2\2\u03ff\u040c\5\u00bc_\2\u0400\u0402\5\u00ba^\2")
        buf.write("\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403\3")
        buf.write("\2\2\2\u0403\u0405\7\4\2\2\u0404\u0406\5\u00c8e\2\u0405")
        buf.write("\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407\3\2\2\2")
        buf.write("\u0407\u0409\7\4\2\2\u0408\u040a\5\u00be`\2\u0409\u0408")
        buf.write("\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040c\3\2\2\2\u040b")
        buf.write("\u03ff\3\2\2\2\u040b\u0401\3\2\2\2\u040c\u00b9\3\2\2\2")
        buf.write("\u040d\u0410\5\u00a6T\2\u040e\u0410\5\u00c2b\2\u040f\u040d")
        buf.write("\3\2\2\2\u040f\u040e\3\2\2\2\u0410\u00bb\3\2\2\2\u0411")
        buf.write("\u0412\5\u00a8U\2\u0412\u0413\5`\61\2\u0413\u0414\7d\2")
        buf.write("\2\u0414\u0415\7\65\2\2\u0415\u0416\5\u00c8e\2\u0416\u00bd")
        buf.write("\3\2\2\2\u0417\u0418\5\u00c2b\2\u0418\u00bf\3\2\2\2\u0419")
        buf.write("\u041a\7,\2\2\u041a\u041b\5\u00c8e\2\u041b\u041c\7-\2")
        buf.write("\2\u041c\u00c1\3\2\2\2\u041d\u0422\5\u00c8e\2\u041e\u041f")
        buf.write("\7\23\2\2\u041f\u0421\5\u00c8e\2\u0420\u041e\3\2\2\2\u0421")
        buf.write("\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0423\3\2\2\2")
        buf.write("\u0423\u00c3\3\2\2\2\u0424\u0422\3\2\2\2\u0425\u0426\5")
        buf.write("\u00c8e\2\u0426\u00c5\3\2\2\2\u0427\u0428\5\u00c8e\2\u0428")
        buf.write("\u00c7\3\2\2\2\u0429\u042a\be\1\2\u042a\u0437\5\u00ca")
        buf.write("f\2\u042b\u042c\t\7\2\2\u042c\u0437\5\u00c8e\23\u042d")
        buf.write("\u042e\t\b\2\2\u042e\u0437\5\u00c8e\22\u042f\u0430\7,")
        buf.write("\2\2\u0430\u0431\5`\61\2\u0431\u0432\7-\2\2\u0432\u0433")
        buf.write("\5\u00c8e\21\u0433\u0437\3\2\2\2\u0434\u0435\7D\2\2\u0435")
        buf.write("\u0437\5\u00ccg\2\u0436\u0429\3\2\2\2\u0436\u042b\3\2")
        buf.write("\2\2\u0436\u042d\3\2\2\2\u0436\u042f\3\2\2\2\u0436\u0434")
        buf.write("\3\2\2\2\u0437\u04b6\3\2\2\2\u0438\u0439\f\17\2\2\u0439")
        buf.write("\u043a\t\t\2\2\u043a\u04b5\5\u00c8e\20\u043b\u043c\f\16")
        buf.write("\2\2\u043c\u043d\t\n\2\2\u043d\u04b5\5\u00c8e\17\u043e")
        buf.write("\u0446\f\r\2\2\u043f\u0440\7\22\2\2\u0440\u0447\7\22\2")
        buf.write("\2\u0441\u0442\7\24\2\2\u0442\u0443\7\24\2\2\u0443\u0447")
        buf.write("\7\24\2\2\u0444\u0445\7\24\2\2\u0445\u0447\7\24\2\2\u0446")
        buf.write("\u043f\3\2\2\2\u0446\u0441\3\2\2\2\u0446\u0444\3\2\2\2")
        buf.write("\u0447\u0448\3\2\2\2\u0448\u04b5\5\u00c8e\16\u0449\u0450")
        buf.write("\f\f\2\2\u044a\u044b\7\22\2\2\u044b\u0451\7\35\2\2\u044c")
        buf.write("\u044d\7\24\2\2\u044d\u0451\7\35\2\2\u044e\u0451\7\24")
        buf.write("\2\2\u044f\u0451\7\22\2\2\u0450\u044a\3\2\2\2\u0450\u044c")
        buf.write("\3\2\2\2\u0450\u044e\3\2\2\2\u0450\u044f\3\2\2\2\u0451")
        buf.write("\u0452\3\2\2\2\u0452\u04b5\5\u00c8e\r\u0453\u0454\f\n")
        buf.write("\2\2\u0454\u0455\t\13\2\2\u0455\u04b5\5\u00c8e\13\u0456")
        buf.write("\u0457\f\t\2\2\u0457\u0458\7\25\2\2\u0458\u04b5\5\u00c8")
        buf.write("e\n\u0459\u045a\f\b\2\2\u045a\u045b\7P\2\2\u045b\u04b5")
        buf.write("\5\u00c8e\t\u045c\u045d\f\7\2\2\u045d\u045e\7Q\2\2\u045e")
        buf.write("\u04b5\5\u00c8e\b\u045f\u0460\f\6\2\2\u0460\u0461\7R\2")
        buf.write("\2\u0461\u04b5\5\u00c8e\7\u0462\u0463\f\5\2\2\u0463\u0464")
        buf.write("\7S\2\2\u0464\u04b5\5\u00c8e\6\u0465\u0466\f\4\2\2\u0466")
        buf.write("\u0467\7*\2\2\u0467\u0468\5\u00c8e\2\u0468\u0469\7\65")
        buf.write("\2\2\u0469\u046a\5\u00c8e\5\u046a\u04b5\3\2\2\2\u046b")
        buf.write("\u047f\f\3\2\2\u046c\u0480\7T\2\2\u046d\u0480\7U\2\2\u046e")
        buf.write("\u0480\7V\2\2\u046f\u0480\7W\2\2\u0470\u0480\7X\2\2\u0471")
        buf.write("\u0480\7Y\2\2\u0472\u0480\7Z\2\2\u0473\u0480\7\35\2\2")
        buf.write("\u0474\u0475\7\24\2\2\u0475\u0476\7\24\2\2\u0476\u0480")
        buf.write("\7\35\2\2\u0477\u0478\7\24\2\2\u0478\u0479\7\24\2\2\u0479")
        buf.write("\u047a\7\24\2\2\u047a\u0480\7\35\2\2\u047b\u047c\7\22")
        buf.write("\2\2\u047c\u047d\7\22\2\2\u047d\u0480\7\35\2\2\u047e\u0480")
        buf.write("\7[\2\2\u047f\u046c\3\2\2\2\u047f\u046d\3\2\2\2\u047f")
        buf.write("\u046e\3\2\2\2\u047f\u046f\3\2\2\2\u047f\u0470\3\2\2\2")
        buf.write("\u047f\u0471\3\2\2\2\u047f\u0472\3\2\2\2\u047f\u0473\3")
        buf.write("\2\2\2\u047f\u0474\3\2\2\2\u047f\u0477\3\2\2\2\u047f\u047b")
        buf.write("\3\2\2\2\u047f\u047e\3\2\2\2\u0480\u0481\3\2\2\2\u0481")
        buf.write("\u04b5\5\u00c8e\4\u0482\u0483\f\34\2\2\u0483\u0484\7\7")
        buf.write("\2\2\u0484\u04b5\7d\2\2\u0485\u0486\f\33\2\2\u0486\u0487")
        buf.write("\7\7\2\2\u0487\u04b5\7/\2\2\u0488\u0489\f\32\2\2\u0489")
        buf.write("\u048a\7\7\2\2\u048a\u048b\7+\2\2\u048b\u048d\7,\2\2\u048c")
        buf.write("\u048e\5\u00c2b\2\u048d\u048c\3\2\2\2\u048d\u048e\3\2")
        buf.write("\2\2\u048e\u048f\3\2\2\2\u048f\u04b5\7-\2\2\u0490\u0491")
        buf.write("\f\31\2\2\u0491\u0492\7\7\2\2\u0492\u0493\7D\2\2\u0493")
        buf.write("\u0494\7d\2\2\u0494\u0496\7,\2\2\u0495\u0497\5\u00c2b")
        buf.write("\2\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498")
        buf.write("\3\2\2\2\u0498\u04b5\7-\2\2\u0499\u049a\f\30\2\2\u049a")
        buf.write("\u049b\7\7\2\2\u049b\u049c\7+\2\2\u049c\u049d\7\7\2\2")
        buf.write("\u049d\u049f\7d\2\2\u049e\u04a0\5\u00dan\2\u049f\u049e")
        buf.write("\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04b5\3\2\2\2\u04a1")
        buf.write("\u04a2\f\27\2\2\u04a2\u04a3\7\7\2\2\u04a3\u04b5\5\u00d2")
        buf.write("j\2\u04a4\u04a5\f\26\2\2\u04a5\u04a6\7\31\2\2\u04a6\u04a7")
        buf.write("\5\u00c8e\2\u04a7\u04a8\7\32\2\2\u04a8\u04b5\3\2\2\2\u04a9")
        buf.write("\u04aa\f\25\2\2\u04aa\u04ac\7,\2\2\u04ab\u04ad\5\u00c2")
        buf.write("b\2\u04ac\u04ab\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04ae")
        buf.write("\3\2\2\2\u04ae\u04b5\7-\2\2\u04af\u04b0\f\24\2\2\u04b0")
        buf.write("\u04b5\t\f\2\2\u04b1\u04b2\f\13\2\2\u04b2\u04b3\7M\2\2")
        buf.write("\u04b3\u04b5\5`\61\2\u04b4\u0438\3\2\2\2\u04b4\u043b\3")
        buf.write("\2\2\2\u04b4\u043e\3\2\2\2\u04b4\u0449\3\2\2\2\u04b4\u0453")
        buf.write("\3\2\2\2\u04b4\u0456\3\2\2\2\u04b4\u0459\3\2\2\2\u04b4")
        buf.write("\u045c\3\2\2\2\u04b4\u045f\3\2\2\2\u04b4\u0462\3\2\2\2")
        buf.write("\u04b4\u0465\3\2\2\2\u04b4\u046b\3\2\2\2\u04b4\u0482\3")
        buf.write("\2\2\2\u04b4\u0485\3\2\2\2\u04b4\u0488\3\2\2\2\u04b4\u0490")
        buf.write("\3\2\2\2\u04b4\u0499\3\2\2\2\u04b4\u04a1\3\2\2\2\u04b4")
        buf.write("\u04a4\3\2\2\2\u04b4\u04a9\3\2\2\2\u04b4\u04af\3\2\2\2")
        buf.write("\u04b4\u04b1\3\2\2\2\u04b5\u04b8\3\2\2\2\u04b6\u04b4\3")
        buf.write("\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u00c9\3\2\2\2\u04b8\u04b6")
        buf.write("\3\2\2\2\u04b9\u04ba\7,\2\2\u04ba\u04bb\5\u00c8e\2\u04bb")
        buf.write("\u04bc\7-\2\2\u04bc\u04c9\3\2\2\2\u04bd\u04c9\7/\2\2\u04be")
        buf.write("\u04c9\7+\2\2\u04bf\u04c9\5|?\2\u04c0\u04c9\7d\2\2\u04c1")
        buf.write("\u04c2\5`\61\2\u04c2\u04c3\7\7\2\2\u04c3\u04c4\7\t\2\2")
        buf.write("\u04c4\u04c9\3\2\2\2\u04c5\u04c6\7\33\2\2\u04c6\u04c7")
        buf.write("\7\7\2\2\u04c7\u04c9\7\t\2\2\u04c8\u04b9\3\2\2\2\u04c8")
        buf.write("\u04bd\3\2\2\2\u04c8\u04be\3\2\2\2\u04c8\u04bf\3\2\2\2")
        buf.write("\u04c8\u04c0\3\2\2\2\u04c8\u04c1\3\2\2\2\u04c8\u04c5\3")
        buf.write("\2\2\2\u04c9\u00cb\3\2\2\2\u04ca\u04cb\5\u00d8m\2\u04cb")
        buf.write("\u04cc\5\u00ceh\2\u04cc\u04cd\5\u00d6l\2\u04cd\u04d4\3")
        buf.write("\2\2\2\u04ce\u04d1\5\u00ceh\2\u04cf\u04d2\5\u00d4k\2\u04d0")
        buf.write("\u04d2\5\u00d6l\2\u04d1\u04cf\3\2\2\2\u04d1\u04d0\3\2")
        buf.write("\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04ca\3\2\2\2\u04d3\u04ce")
        buf.write("\3\2\2\2\u04d4\u00cd\3\2\2\2\u04d5\u04d8\5b\62\2\u04d6")
        buf.write("\u04d8\5d\63\2\u04d7\u04d5\3\2\2\2\u04d7\u04d6\3\2\2\2")
        buf.write("\u04d8\u00cf\3\2\2\2\u04d9\u04db\5\u00d8m\2\u04da\u04d9")
        buf.write("\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc")
        buf.write("\u04dd\7d\2\2\u04dd\u04de\5\u00d6l\2\u04de\u00d1\3\2\2")
        buf.write("\2\u04df\u04e0\5\u00d8m\2\u04e0\u04e1\7d\2\2\u04e1\u04e2")
        buf.write("\5\u00dan\2\u04e2\u00d3\3\2\2\2\u04e3\u04ff\7\31\2\2\u04e4")
        buf.write("\u04e9\7\32\2\2\u04e5\u04e6\7\31\2\2\u04e6\u04e8\7\32")
        buf.write("\2\2\u04e7\u04e5\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9\u04e7")
        buf.write("\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb")
        buf.write("\u04e9\3\2\2\2\u04ec\u0500\5V,\2\u04ed\u04ee\5\u00c8e")
        buf.write("\2\u04ee\u04f5\7\32\2\2\u04ef\u04f0\7\31\2\2\u04f0\u04f1")
        buf.write("\5\u00c8e\2\u04f1\u04f2\7\32\2\2\u04f2\u04f4\3\2\2\2\u04f3")
        buf.write("\u04ef\3\2\2\2\u04f4\u04f7\3\2\2\2\u04f5\u04f3\3\2\2\2")
        buf.write("\u04f5\u04f6\3\2\2\2\u04f6\u04fc\3\2\2\2\u04f7\u04f5\3")
        buf.write("\2\2\2\u04f8\u04f9\7\31\2\2\u04f9\u04fb\7\32\2\2\u04fa")
        buf.write("\u04f8\3\2\2\2\u04fb\u04fe\3\2\2\2\u04fc\u04fa\3\2\2\2")
        buf.write("\u04fc\u04fd\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3")
        buf.write("\2\2\2\u04ff\u04e4\3\2\2\2\u04ff\u04ed\3\2\2\2\u0500\u00d5")
        buf.write("\3\2\2\2\u0501\u0503\5\u00dan\2\u0502\u0504\5&\24\2\u0503")
        buf.write("\u0502\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u00d7\3\2\2\2")
        buf.write("\u0505\u0506\7\22\2\2\u0506\u0507\5$\23\2\u0507\u0508")
        buf.write("\7\24\2\2\u0508\u00d9\3\2\2\2\u0509\u050b\7,\2\2\u050a")
        buf.write("\u050c\5\u00c2b\2\u050b\u050a\3\2\2\2\u050b\u050c\3\2")
        buf.write("\2\2\u050c\u050d\3\2\2\2\u050d\u050e\7-\2\2\u050e\u00db")
        buf.write("\3\2\2\2\u008e\u00dd\u00e2\u00e8\u00f3\u00f8\u00ff\u0105")
        buf.write("\u0108\u010d\u0111\u0115\u011d\u0123\u012d\u0132\u013b")
        buf.write("\u0143\u014a\u014f\u0152\u0155\u015e\u0162\u0166\u0169")
        buf.write("\u016f\u0175\u0179\u0182\u0189\u0192\u0199\u019f\u01a7")
        buf.write("\u01b0\u01ba\u01be\u01c2\u01cc\u01d2\u01da\u01e3\u01ed")
        buf.write("\u01f2\u01f6\u01fd\u0202\u0209\u0211\u021d\u0223\u022a")
        buf.write("\u0231\u023c\u0241\u0249\u024d\u024f\u025f\u026c\u0274")
        buf.write("\u0277\u027b\u0280\u0284\u028b\u0293\u029c\u029e\u02a5")
        buf.write("\u02aa\u02b5\u02b9\u02bf\u02c4\u02ca\u02d3\u02d9\u02e0")
        buf.write("\u02e9\u02f2\u02f9\u02fc\u0303\u030b\u0315\u031d\u0320")
        buf.write("\u0323\u0330\u033e\u0342\u0346\u034a\u034c\u0350\u0356")
        buf.write("\u0361\u036a\u0376\u037e\u0387\u03a2\u03ae\u03b7\u03bc")
        buf.write("\u03c6\u03cc\u03dd\u03e3\u03eb\u03f0\u03fd\u0401\u0405")
        buf.write("\u0409\u040b\u040f\u0422\u0436\u0446\u0450\u047f\u048d")
        buf.write("\u0496\u049f\u04ac\u04b4\u04b6\u04c8\u04d1\u04d3\u04d7")
        buf.write("\u04da\u04e9\u04f5\u04fc\u04ff\u0503\u050b")
        return buf.getvalue()


class JavaLangParser ( Parser ):

    grammarFileName = "JavaLang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'package'", "';'", "'import'", "'static'", 
                     "'.'", "'*'", "'class'", "'extends'", "'implements'", 
                     "'public'", "'protected'", "'private'", "'abstract'", 
                     "'final'", "'strictfp'", "'<'", "','", "'>'", "'&'", 
                     "'{'", "'}'", "'interface'", "'['", "']'", "'void'", 
                     "'throws'", "'='", "'native'", "'synchronized'", "'transient'", 
                     "'volatile'", "'boolean'", "'char'", "'byte'", "'short'", 
                     "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", 
                     "'('", "')'", "'...'", "'this'", "'null'", "'true'", 
                     "'false'", "'@'", "'default'", "':'", "'if'", "'else'", 
                     "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", 
                     "'return'", "'throw'", "'break'", "'continue'", "'catch'", 
                     "'case'", "'new'", "'++'", "'--'", "'+'", "'-'", "'~'", 
                     "'!'", "'/'", "'%'", "'instanceof'", "'=='", "'!='", 
                     "'^'", "'|'", "'&&'", "'||'", "'^='", "'+='", "'-='", 
                     "'*='", "'/='", "'&='", "'|='", "'%='", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'enum'", "'assert'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "HexLiteral", "DecimalLiteral", 
                      "OctalLiteral", "FloatingPointLiteral", "CharacterLiteral", 
                      "StringLiteral", "ENUM", "ASSERT", "Identifier", "COMMENT", 
                      "WS", "LINE_COMMENT" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_classDeclaration = 4
    RULE_enumDeclaration = 5
    RULE_interfaceDeclaration = 6
    RULE_classOrInterfaceModifier = 7
    RULE_modifiers = 8
    RULE_typeParameters = 9
    RULE_typeParameter = 10
    RULE_typeBound = 11
    RULE_enumBody = 12
    RULE_enumConstants = 13
    RULE_enumConstant = 14
    RULE_enumBodyDeclarations = 15
    RULE_normalInterfaceDeclaration = 16
    RULE_typeList = 17
    RULE_classBody = 18
    RULE_interfaceBody = 19
    RULE_classBodyDeclaration = 20
    RULE_member = 21
    RULE_methodDeclaration = 22
    RULE_methodDeclarationRest = 23
    RULE_genericMethodDeclaration = 24
    RULE_fieldDeclaration = 25
    RULE_constructorDeclaration = 26
    RULE_interfaceBodyDeclaration = 27
    RULE_interfaceMemberDecl = 28
    RULE_interfaceMethodOrFieldDecl = 29
    RULE_interfaceMethodOrFieldRest = 30
    RULE_voidMethodDeclaratorRest = 31
    RULE_interfaceMethodDeclaratorRest = 32
    RULE_interfaceGenericMethodDecl = 33
    RULE_voidInterfaceMethodDeclaratorRest = 34
    RULE_constantDeclarator = 35
    RULE_variableDeclarators = 36
    RULE_variableDeclarator = 37
    RULE_constantDeclaratorsRest = 38
    RULE_constantDeclaratorRest = 39
    RULE_variableDeclaratorId = 40
    RULE_variableInitializer = 41
    RULE_arrayInitializer = 42
    RULE_modifier = 43
    RULE_packageOrTypeName = 44
    RULE_enumConstantName = 45
    RULE_typeName = 46
    RULE_entityType = 47
    RULE_classOrInterfaceType = 48
    RULE_primitiveType = 49
    RULE_variableModifier = 50
    RULE_typeArguments = 51
    RULE_typeArgument = 52
    RULE_qualifiedNameList = 53
    RULE_formalParameters = 54
    RULE_formalParameterDecls = 55
    RULE_formalParameterDeclsRest = 56
    RULE_methodBody = 57
    RULE_constructorBody = 58
    RULE_explicitConstructorInvocation = 59
    RULE_qualifiedName = 60
    RULE_literal = 61
    RULE_integerLiteral = 62
    RULE_booleanLiteral = 63
    RULE_annotations = 64
    RULE_annotation = 65
    RULE_annotationName = 66
    RULE_elementValuePairs = 67
    RULE_elementValuePair = 68
    RULE_elementValue = 69
    RULE_elementValueArrayInitializer = 70
    RULE_annotationTypeDeclaration = 71
    RULE_annotationTypeBody = 72
    RULE_annotationTypeElementDeclaration = 73
    RULE_annotationTypeElementRest = 74
    RULE_annotationMethodOrConstantRest = 75
    RULE_annotationMethodRest = 76
    RULE_annotationConstantRest = 77
    RULE_defaultValue = 78
    RULE_block = 79
    RULE_blockStatement = 80
    RULE_localVariableDeclarationStatement = 81
    RULE_localVariableDeclaration = 82
    RULE_variableModifiers = 83
    RULE_statement = 84
    RULE_catches = 85
    RULE_catchClause = 86
    RULE_formalParameter = 87
    RULE_switchBlock = 88
    RULE_switchBlockStatementGroup = 89
    RULE_switchLabel = 90
    RULE_forControl = 91
    RULE_forInit = 92
    RULE_enhancedForControl = 93
    RULE_forUpdate = 94
    RULE_parExpression = 95
    RULE_expressionList = 96
    RULE_statementExpression = 97
    RULE_constantExpression = 98
    RULE_expression = 99
    RULE_primary = 100
    RULE_creator = 101
    RULE_createdName = 102
    RULE_innerCreator = 103
    RULE_explicitGenericInvocation = 104
    RULE_arrayCreatorRest = 105
    RULE_classCreatorRest = 106
    RULE_nonWildcardTypeArguments = 107
    RULE_arguments = 108

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "classDeclaration", "enumDeclaration", 
                   "interfaceDeclaration", "classOrInterfaceModifier", "modifiers", 
                   "typeParameters", "typeParameter", "typeBound", "enumBody", 
                   "enumConstants", "enumConstant", "enumBodyDeclarations", 
                   "normalInterfaceDeclaration", "typeList", "classBody", 
                   "interfaceBody", "classBodyDeclaration", "member", "methodDeclaration", 
                   "methodDeclarationRest", "genericMethodDeclaration", 
                   "fieldDeclaration", "constructorDeclaration", "interfaceBodyDeclaration", 
                   "interfaceMemberDecl", "interfaceMethodOrFieldDecl", 
                   "interfaceMethodOrFieldRest", "voidMethodDeclaratorRest", 
                   "interfaceMethodDeclaratorRest", "interfaceGenericMethodDecl", 
                   "voidInterfaceMethodDeclaratorRest", "constantDeclarator", 
                   "variableDeclarators", "variableDeclarator", "constantDeclaratorsRest", 
                   "constantDeclaratorRest", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "modifier", "packageOrTypeName", 
                   "enumConstantName", "typeName", "entityType", "classOrInterfaceType", 
                   "primitiveType", "variableModifier", "typeArguments", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "formalParameterDecls", "formalParameterDeclsRest", "methodBody", 
                   "constructorBody", "explicitConstructorInvocation", "qualifiedName", 
                   "literal", "integerLiteral", "booleanLiteral", "annotations", 
                   "annotation", "annotationName", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "block", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "variableModifiers", "statement", 
                   "catches", "catchClause", "formalParameter", "switchBlock", 
                   "switchBlockStatementGroup", "switchLabel", "forControl", 
                   "forInit", "enhancedForControl", "forUpdate", "parExpression", 
                   "expressionList", "statementExpression", "constantExpression", 
                   "expression", "primary", "creator", "createdName", "innerCreator", 
                   "explicitGenericInvocation", "arrayCreatorRest", "classCreatorRest", 
                   "nonWildcardTypeArguments", "arguments" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    HexLiteral=90
    DecimalLiteral=91
    OctalLiteral=92
    FloatingPointLiteral=93
    CharacterLiteral=94
    StringLiteral=95
    ENUM=96
    ASSERT=97
    Identifier=98
    COMMENT=99
    WS=100
    LINE_COMMENT=101

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(JavaLangParser.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ImportDeclarationContext,i)


        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = JavaLangParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__0:
                self.state = 218
                self.packageDeclaration()


            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__2:
                self.state = 221
                self.importDeclaration()
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__1) | (1 << JavaLangParser.T__3) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__9) | (1 << JavaLangParser.T__10) | (1 << JavaLangParser.T__11) | (1 << JavaLangParser.T__12) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__14) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__48))) != 0) or _la==JavaLangParser.ENUM:
                self.state = 227
                self.typeDeclaration()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(JavaLangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = JavaLangParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(JavaLangParser.T__0)
            self.state = 236
            self.qualifiedName()
            self.state = 237
            self.match(JavaLangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = JavaLangParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(JavaLangParser.T__2)
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__3:
                self.state = 240
                self.match(JavaLangParser.T__3)


            self.state = 243
            self.qualifiedName()
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__4:
                self.state = 244
                self.match(JavaLangParser.T__4)
                self.state = 245
                self.match(JavaLangParser.T__5)


            self.state = 248
            self.match(JavaLangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.EnumDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = JavaLangParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        try:
            self.state = 262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__3, JavaLangParser.T__6, JavaLangParser.T__9, JavaLangParser.T__10, JavaLangParser.T__11, JavaLangParser.T__12, JavaLangParser.T__13, JavaLangParser.T__14, JavaLangParser.T__21, JavaLangParser.T__48, JavaLangParser.ENUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 250
                        self.classOrInterfaceModifier() 
                    self.state = 255
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                self.state = 259
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaLangParser.T__6]:
                    self.state = 256
                    self.classDeclaration()
                    pass
                elif token in [JavaLangParser.T__21, JavaLangParser.T__48]:
                    self.state = 257
                    self.interfaceDeclaration()
                    pass
                elif token in [JavaLangParser.ENUM]:
                    self.state = 258
                    self.enumDeclaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [JavaLangParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.match(JavaLangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def classBody(self):
            return self.getTypedRuleContext(JavaLangParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaLangParser.TypeParametersContext,0)


        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def typeList(self):
            return self.getTypedRuleContext(JavaLangParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = JavaLangParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(JavaLangParser.T__6)
            self.state = 265
            self.match(JavaLangParser.Identifier)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__15:
                self.state = 266
                self.typeParameters()


            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__7:
                self.state = 269
                self.match(JavaLangParser.T__7)
                self.state = 270
                self.entityType()


            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__8:
                self.state = 273
                self.match(JavaLangParser.T__8)
                self.state = 274
                self.typeList()


            self.state = 277
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaLangParser.ENUM, 0)

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def enumBody(self):
            return self.getTypedRuleContext(JavaLangParser.EnumBodyContext,0)


        def typeList(self):
            return self.getTypedRuleContext(JavaLangParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = JavaLangParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(JavaLangParser.ENUM)
            self.state = 280
            self.match(JavaLangParser.Identifier)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__8:
                self.state = 281
                self.match(JavaLangParser.T__8)
                self.state = 282
                self.typeList()


            self.state = 285
            self.enumBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalInterfaceDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.NormalInterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationTypeDeclarationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = JavaLangParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_interfaceDeclaration)
        try:
            self.state = 289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.normalInterfaceDeclaration()
                pass
            elif token in [JavaLangParser.T__48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                self.annotationTypeDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)




    def classOrInterfaceModifier(self):

        localctx = JavaLangParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self.annotation()
                pass
            elif token in [JavaLangParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.match(JavaLangParser.T__9)
                pass
            elif token in [JavaLangParser.T__10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.match(JavaLangParser.T__10)
                pass
            elif token in [JavaLangParser.T__11]:
                self.enterOuterAlt(localctx, 4)
                self.state = 294
                self.match(JavaLangParser.T__11)
                pass
            elif token in [JavaLangParser.T__12]:
                self.enterOuterAlt(localctx, 5)
                self.state = 295
                self.match(JavaLangParser.T__12)
                pass
            elif token in [JavaLangParser.T__3]:
                self.enterOuterAlt(localctx, 6)
                self.state = 296
                self.match(JavaLangParser.T__3)
                pass
            elif token in [JavaLangParser.T__13]:
                self.enterOuterAlt(localctx, 7)
                self.state = 297
                self.match(JavaLangParser.T__13)
                pass
            elif token in [JavaLangParser.T__14]:
                self.enterOuterAlt(localctx, 8)
                self.state = 298
                self.match(JavaLangParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifiers" ):
                listener.enterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifiers" ):
                listener.exitModifiers(self)




    def modifiers(self):

        localctx = JavaLangParser.ModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 301
                    self.modifier() 
                self.state = 306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.TypeParameterContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = JavaLangParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(JavaLangParser.T__15)
            self.state = 308
            self.typeParameter()
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 309
                self.match(JavaLangParser.T__16)
                self.state = 310
                self.typeParameter()
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            self.match(JavaLangParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaLangParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = JavaLangParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(JavaLangParser.Identifier)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__7:
                self.state = 319
                self.match(JavaLangParser.T__7)
                self.state = 320
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.EntityTypeContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = JavaLangParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.entityType()
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__18:
                self.state = 324
                self.match(JavaLangParser.T__18)
                self.state = 325
                self.entityType()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstants(self):
            return self.getTypedRuleContext(JavaLangParser.EnumConstantsContext,0)


        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaLangParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_enumBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBody" ):
                listener.enterEnumBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBody" ):
                listener.exitEnumBody(self)




    def enumBody(self):

        localctx = JavaLangParser.EnumBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(JavaLangParser.T__19)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__48 or _la==JavaLangParser.Identifier:
                self.state = 332
                self.enumConstants()


            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__16:
                self.state = 335
                self.match(JavaLangParser.T__16)


            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__1:
                self.state = 338
                self.enumBodyDeclarations()


            self.state = 341
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.EnumConstantContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = JavaLangParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.enumConstant()
            self.state = 348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 344
                    self.match(JavaLangParser.T__16)
                    self.state = 345
                    self.enumConstant() 
                self.state = 350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def annotations(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationsContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaLangParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaLangParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = JavaLangParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__48:
                self.state = 351
                self.annotations()


            self.state = 354
            self.match(JavaLangParser.Identifier)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__41:
                self.state = 355
                self.arguments()


            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__19:
                self.state = 358
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumBodyDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = JavaLangParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(JavaLangParser.T__1)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__1) | (1 << JavaLangParser.T__3) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__9) | (1 << JavaLangParser.T__10) | (1 << JavaLangParser.T__11) | (1 << JavaLangParser.T__12) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__14) | (1 << JavaLangParser.T__15) | (1 << JavaLangParser.T__19) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__27) | (1 << JavaLangParser.T__28) | (1 << JavaLangParser.T__29) | (1 << JavaLangParser.T__30) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__48))) != 0) or _la==JavaLangParser.Identifier:
                self.state = 362
                self.classBodyDeclaration()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NormalInterfaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaLangParser.TypeParametersContext,0)


        def typeList(self):
            return self.getTypedRuleContext(JavaLangParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_normalInterfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalInterfaceDeclaration" ):
                listener.enterNormalInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalInterfaceDeclaration" ):
                listener.exitNormalInterfaceDeclaration(self)




    def normalInterfaceDeclaration(self):

        localctx = JavaLangParser.NormalInterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_normalInterfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(JavaLangParser.T__21)
            self.state = 369
            self.match(JavaLangParser.Identifier)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__15:
                self.state = 370
                self.typeParameters()


            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__7:
                self.state = 373
                self.match(JavaLangParser.T__7)
                self.state = 374
                self.typeList()


            self.state = 377
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.EntityTypeContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = JavaLangParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.entityType()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 380
                self.match(JavaLangParser.T__16)
                self.state = 381
                self.entityType()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = JavaLangParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(JavaLangParser.T__19)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__1) | (1 << JavaLangParser.T__3) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__9) | (1 << JavaLangParser.T__10) | (1 << JavaLangParser.T__11) | (1 << JavaLangParser.T__12) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__14) | (1 << JavaLangParser.T__15) | (1 << JavaLangParser.T__19) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__27) | (1 << JavaLangParser.T__28) | (1 << JavaLangParser.T__29) | (1 << JavaLangParser.T__30) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__48))) != 0) or _la==JavaLangParser.Identifier:
                self.state = 388
                self.classBodyDeclaration()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 394
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = JavaLangParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(JavaLangParser.T__19)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__1) | (1 << JavaLangParser.T__3) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__9) | (1 << JavaLangParser.T__10) | (1 << JavaLangParser.T__11) | (1 << JavaLangParser.T__12) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__14) | (1 << JavaLangParser.T__15) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__27) | (1 << JavaLangParser.T__28) | (1 << JavaLangParser.T__29) | (1 << JavaLangParser.T__30) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__48))) != 0) or _la==JavaLangParser.Identifier:
                self.state = 397
                self.interfaceBodyDeclaration()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaLangParser.BlockContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(JavaLangParser.ModifiersContext,0)


        def member(self):
            return self.getTypedRuleContext(JavaLangParser.MemberContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = JavaLangParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__3:
                    self.state = 406
                    self.match(JavaLangParser.T__3)


                self.state = 409
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 410
                self.modifiers()
                self.state = 411
                self.member()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.GenericMethodDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.MethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.ConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.ClassDeclarationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember" ):
                listener.enterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember" ):
                listener.exitMember(self)




    def member(self):

        localctx = JavaLangParser.MemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_member)
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.genericMethodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 417
                self.fieldDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 418
                self.constructorDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 419
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 420
                self.classDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParametersContext,0)


        def methodDeclarationRest(self):
            return self.getTypedRuleContext(JavaLangParser.MethodDeclarationRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = JavaLangParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.entityType()
                self.state = 424
                self.match(JavaLangParser.Identifier)
                self.state = 425
                self.formalParameters()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaLangParser.T__22:
                    self.state = 426
                    self.match(JavaLangParser.T__22)
                    self.state = 427
                    self.match(JavaLangParser.T__23)
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 433
                self.methodDeclarationRest()
                pass
            elif token in [JavaLangParser.T__24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.match(JavaLangParser.T__24)
                self.state = 436
                self.match(JavaLangParser.Identifier)
                self.state = 437
                self.formalParameters()
                self.state = 438
                self.methodDeclarationRest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodBody(self):
            return self.getTypedRuleContext(JavaLangParser.MethodBodyContext,0)


        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_methodDeclarationRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclarationRest" ):
                listener.enterMethodDeclarationRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclarationRest" ):
                listener.exitMethodDeclarationRest(self)




    def methodDeclarationRest(self):

        localctx = JavaLangParser.MethodDeclarationRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_methodDeclarationRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__25:
                self.state = 442
                self.match(JavaLangParser.T__25)
                self.state = 443
                self.qualifiedNameList()


            self.state = 448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__19]:
                self.state = 446
                self.methodBody()
                pass
            elif token in [JavaLangParser.T__1]:
                self.state = 447
                self.match(JavaLangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaLangParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)




    def genericMethodDeclaration(self):

        localctx = JavaLangParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.typeParameters()
            self.state = 451
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaLangParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = JavaLangParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.entityType()
            self.state = 454
            self.variableDeclarators()
            self.state = 455
            self.match(JavaLangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParametersContext,0)


        def constructorBody(self):
            return self.getTypedRuleContext(JavaLangParser.ConstructorBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaLangParser.TypeParametersContext,0)


        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = JavaLangParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__15:
                self.state = 457
                self.typeParameters()


            self.state = 460
            self.match(JavaLangParser.Identifier)
            self.state = 461
            self.formalParameters()
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__25:
                self.state = 462
                self.match(JavaLangParser.T__25)
                self.state = 463
                self.qualifiedNameList()


            self.state = 466
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(JavaLangParser.ModifiersContext,0)


        def interfaceMemberDecl(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceMemberDeclContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaLangParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__3, JavaLangParser.T__6, JavaLangParser.T__9, JavaLangParser.T__10, JavaLangParser.T__11, JavaLangParser.T__12, JavaLangParser.T__13, JavaLangParser.T__14, JavaLangParser.T__15, JavaLangParser.T__21, JavaLangParser.T__24, JavaLangParser.T__27, JavaLangParser.T__28, JavaLangParser.T__29, JavaLangParser.T__30, JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.T__48, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.modifiers()
                self.state = 469
                self.interfaceMemberDecl()
                pass
            elif token in [JavaLangParser.T__1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(JavaLangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMemberDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMethodOrFieldDecl(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceMethodOrFieldDeclContext,0)


        def interfaceGenericMethodDecl(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceGenericMethodDeclContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def voidInterfaceMethodDeclaratorRest(self):
            return self.getTypedRuleContext(JavaLangParser.VoidInterfaceMethodDeclaratorRestContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.ClassDeclarationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceMemberDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDecl" ):
                listener.enterInterfaceMemberDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDecl" ):
                listener.exitInterfaceMemberDecl(self)




    def interfaceMemberDecl(self):

        localctx = JavaLangParser.InterfaceMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interfaceMemberDecl)
        try:
            self.state = 481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.interfaceMethodOrFieldDecl()
                pass
            elif token in [JavaLangParser.T__15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.interfaceGenericMethodDecl()
                pass
            elif token in [JavaLangParser.T__24]:
                self.enterOuterAlt(localctx, 3)
                self.state = 476
                self.match(JavaLangParser.T__24)
                self.state = 477
                self.match(JavaLangParser.Identifier)
                self.state = 478
                self.voidInterfaceMethodDeclaratorRest()
                pass
            elif token in [JavaLangParser.T__21, JavaLangParser.T__48]:
                self.enterOuterAlt(localctx, 4)
                self.state = 479
                self.interfaceDeclaration()
                pass
            elif token in [JavaLangParser.T__6]:
                self.enterOuterAlt(localctx, 5)
                self.state = 480
                self.classDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodOrFieldDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def interfaceMethodOrFieldRest(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceMethodOrFieldRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceMethodOrFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodOrFieldDecl" ):
                listener.enterInterfaceMethodOrFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodOrFieldDecl" ):
                listener.exitInterfaceMethodOrFieldDecl(self)




    def interfaceMethodOrFieldDecl(self):

        localctx = JavaLangParser.InterfaceMethodOrFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceMethodOrFieldDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.entityType()
            self.state = 484
            self.match(JavaLangParser.Identifier)
            self.state = 485
            self.interfaceMethodOrFieldRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodOrFieldRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantDeclaratorsRest(self):
            return self.getTypedRuleContext(JavaLangParser.ConstantDeclaratorsRestContext,0)


        def interfaceMethodDeclaratorRest(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceMethodDeclaratorRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceMethodOrFieldRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodOrFieldRest" ):
                listener.enterInterfaceMethodOrFieldRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodOrFieldRest" ):
                listener.exitInterfaceMethodOrFieldRest(self)




    def interfaceMethodOrFieldRest(self):

        localctx = JavaLangParser.InterfaceMethodOrFieldRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_interfaceMethodOrFieldRest)
        try:
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__22, JavaLangParser.T__26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.constantDeclaratorsRest()
                self.state = 488
                self.match(JavaLangParser.T__1)
                pass
            elif token in [JavaLangParser.T__41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.interfaceMethodDeclaratorRest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VoidMethodDeclaratorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameters(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaLangParser.MethodBodyContext,0)


        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_voidMethodDeclaratorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoidMethodDeclaratorRest" ):
                listener.enterVoidMethodDeclaratorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoidMethodDeclaratorRest" ):
                listener.exitVoidMethodDeclaratorRest(self)




    def voidMethodDeclaratorRest(self):

        localctx = JavaLangParser.VoidMethodDeclaratorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_voidMethodDeclaratorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.formalParameters()
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__25:
                self.state = 494
                self.match(JavaLangParser.T__25)
                self.state = 495
                self.qualifiedNameList()


            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__19]:
                self.state = 498
                self.methodBody()
                pass
            elif token in [JavaLangParser.T__1]:
                self.state = 499
                self.match(JavaLangParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodDeclaratorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameters(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParametersContext,0)


        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceMethodDeclaratorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaratorRest" ):
                listener.enterInterfaceMethodDeclaratorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaratorRest" ):
                listener.exitInterfaceMethodDeclaratorRest(self)




    def interfaceMethodDeclaratorRest(self):

        localctx = JavaLangParser.InterfaceMethodDeclaratorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMethodDeclaratorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.formalParameters()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__22:
                self.state = 503
                self.match(JavaLangParser.T__22)
                self.state = 504
                self.match(JavaLangParser.T__23)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__25:
                self.state = 510
                self.match(JavaLangParser.T__25)
                self.state = 511
                self.qualifiedNameList()


            self.state = 514
            self.match(JavaLangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceGenericMethodDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaLangParser.TypeParametersContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def interfaceMethodDeclaratorRest(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceMethodDeclaratorRestContext,0)


        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_interfaceGenericMethodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceGenericMethodDecl" ):
                listener.enterInterfaceGenericMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceGenericMethodDecl" ):
                listener.exitInterfaceGenericMethodDecl(self)




    def interfaceGenericMethodDecl(self):

        localctx = JavaLangParser.InterfaceGenericMethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_interfaceGenericMethodDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.typeParameters()
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.Identifier]:
                self.state = 517
                self.entityType()
                pass
            elif token in [JavaLangParser.T__24]:
                self.state = 518
                self.match(JavaLangParser.T__24)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 521
            self.match(JavaLangParser.Identifier)
            self.state = 522
            self.interfaceMethodDeclaratorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VoidInterfaceMethodDeclaratorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameters(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParametersContext,0)


        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_voidInterfaceMethodDeclaratorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoidInterfaceMethodDeclaratorRest" ):
                listener.enterVoidInterfaceMethodDeclaratorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoidInterfaceMethodDeclaratorRest" ):
                listener.exitVoidInterfaceMethodDeclaratorRest(self)




    def voidInterfaceMethodDeclaratorRest(self):

        localctx = JavaLangParser.VoidInterfaceMethodDeclaratorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_voidInterfaceMethodDeclaratorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.formalParameters()
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__25:
                self.state = 525
                self.match(JavaLangParser.T__25)
                self.state = 526
                self.qualifiedNameList()


            self.state = 529
            self.match(JavaLangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def constantDeclaratorRest(self):
            return self.getTypedRuleContext(JavaLangParser.ConstantDeclaratorRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)




    def constantDeclarator(self):

        localctx = JavaLangParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_constantDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(JavaLangParser.Identifier)
            self.state = 532
            self.constantDeclaratorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.VariableDeclaratorContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = JavaLangParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.variableDeclarator()
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 535
                self.match(JavaLangParser.T__16)
                self.state = 536
                self.variableDeclarator()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaLangParser.VariableDeclaratorIdContext,0)


        def variableInitializer(self):
            return self.getTypedRuleContext(JavaLangParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = JavaLangParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.variableDeclaratorId()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__26:
                self.state = 543
                self.match(JavaLangParser.T__26)
                self.state = 544
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclaratorsRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantDeclaratorRest(self):
            return self.getTypedRuleContext(JavaLangParser.ConstantDeclaratorRestContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ConstantDeclaratorContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_constantDeclaratorsRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaratorsRest" ):
                listener.enterConstantDeclaratorsRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaratorsRest" ):
                listener.exitConstantDeclaratorsRest(self)




    def constantDeclaratorsRest(self):

        localctx = JavaLangParser.ConstantDeclaratorsRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_constantDeclaratorsRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.constantDeclaratorRest()
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 548
                self.match(JavaLangParser.T__16)
                self.state = 549
                self.constantDeclarator()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclaratorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaLangParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_constantDeclaratorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaratorRest" ):
                listener.enterConstantDeclaratorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaratorRest" ):
                listener.exitConstantDeclaratorRest(self)




    def constantDeclaratorRest(self):

        localctx = JavaLangParser.ConstantDeclaratorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_constantDeclaratorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__22:
                self.state = 555
                self.match(JavaLangParser.T__22)
                self.state = 556
                self.match(JavaLangParser.T__23)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 562
            self.match(JavaLangParser.T__26)
            self.state = 563
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def getRuleIndex(self):
            return JavaLangParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = JavaLangParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(JavaLangParser.Identifier)
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__22:
                self.state = 566
                self.match(JavaLangParser.T__22)
                self.state = 567
                self.match(JavaLangParser.T__23)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaLangParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = JavaLangParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_variableInitializer)
        try:
            self.state = 575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.arrayInitializer()
                pass
            elif token in [JavaLangParser.T__24, JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.T__40, JavaLangParser.T__41, JavaLangParser.T__44, JavaLangParser.T__45, JavaLangParser.T__46, JavaLangParser.T__47, JavaLangParser.T__65, JavaLangParser.T__66, JavaLangParser.T__67, JavaLangParser.T__68, JavaLangParser.T__69, JavaLangParser.T__70, JavaLangParser.T__71, JavaLangParser.HexLiteral, JavaLangParser.DecimalLiteral, JavaLangParser.OctalLiteral, JavaLangParser.FloatingPointLiteral, JavaLangParser.CharacterLiteral, JavaLangParser.StringLiteral, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.VariableInitializerContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = JavaLangParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(JavaLangParser.T__19)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__19) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                self.state = 578
                self.variableInitializer()
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 579
                        self.match(JavaLangParser.T__16)
                        self.state = 580
                        self.variableInitializer() 
                    self.state = 585
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__16:
                    self.state = 586
                    self.match(JavaLangParser.T__16)




            self.state = 591
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = JavaLangParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_modifier)
        try:
            self.state = 605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 593
                self.annotation()
                pass
            elif token in [JavaLangParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 594
                self.match(JavaLangParser.T__9)
                pass
            elif token in [JavaLangParser.T__10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 595
                self.match(JavaLangParser.T__10)
                pass
            elif token in [JavaLangParser.T__11]:
                self.enterOuterAlt(localctx, 4)
                self.state = 596
                self.match(JavaLangParser.T__11)
                pass
            elif token in [JavaLangParser.T__3]:
                self.enterOuterAlt(localctx, 5)
                self.state = 597
                self.match(JavaLangParser.T__3)
                pass
            elif token in [JavaLangParser.T__12]:
                self.enterOuterAlt(localctx, 6)
                self.state = 598
                self.match(JavaLangParser.T__12)
                pass
            elif token in [JavaLangParser.T__13]:
                self.enterOuterAlt(localctx, 7)
                self.state = 599
                self.match(JavaLangParser.T__13)
                pass
            elif token in [JavaLangParser.T__27]:
                self.enterOuterAlt(localctx, 8)
                self.state = 600
                self.match(JavaLangParser.T__27)
                pass
            elif token in [JavaLangParser.T__28]:
                self.enterOuterAlt(localctx, 9)
                self.state = 601
                self.match(JavaLangParser.T__28)
                pass
            elif token in [JavaLangParser.T__29]:
                self.enterOuterAlt(localctx, 10)
                self.state = 602
                self.match(JavaLangParser.T__29)
                pass
            elif token in [JavaLangParser.T__30]:
                self.enterOuterAlt(localctx, 11)
                self.state = 603
                self.match(JavaLangParser.T__30)
                pass
            elif token in [JavaLangParser.T__14]:
                self.enterOuterAlt(localctx, 12)
                self.state = 604
                self.match(JavaLangParser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageOrTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_packageOrTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageOrTypeName" ):
                listener.enterPackageOrTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageOrTypeName" ):
                listener.exitPackageOrTypeName(self)




    def packageOrTypeName(self):

        localctx = JavaLangParser.PackageOrTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_packageOrTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def getRuleIndex(self):
            return JavaLangParser.RULE_enumConstantName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantName" ):
                listener.enterEnumConstantName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantName" ):
                listener.exitEnumConstantName(self)




    def enumConstantName(self):

        localctx = JavaLangParser.EnumConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumConstantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(JavaLangParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaLangParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = JavaLangParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EntityTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaLangParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaLangParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_entityType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityType" ):
                listener.enterEntityType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityType" ):
                listener.exitEntityType(self)




    def entityType(self):

        localctx = JavaLangParser.EntityTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_entityType)
        try:
            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.classOrInterfaceType()
                self.state = 618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 614
                        self.match(JavaLangParser.T__22)
                        self.state = 615
                        self.match(JavaLangParser.T__23) 
                    self.state = 620
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                pass
            elif token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.primitiveType()
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 622
                        self.match(JavaLangParser.T__22)
                        self.state = 623
                        self.match(JavaLangParser.T__23) 
                    self.state = 628
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaLangParser.Identifier)
            else:
                return self.getToken(JavaLangParser.Identifier, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.TypeArgumentsContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = JavaLangParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(JavaLangParser.Identifier)
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 632
                self.typeArguments()


            self.state = 642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 635
                    self.match(JavaLangParser.T__4)
                    self.state = 636
                    self.match(JavaLangParser.Identifier)
                    self.state = 638
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        self.state = 637
                        self.typeArguments()

             
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaLangParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = JavaLangParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = JavaLangParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_variableModifier)
        try:
            self.state = 649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(JavaLangParser.T__13)
                pass
            elif token in [JavaLangParser.T__48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 648
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.TypeArgumentContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = JavaLangParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(JavaLangParser.T__15)
            self.state = 652
            self.typeArgument()
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 653
                self.match(JavaLangParser.T__16)
                self.state = 654
                self.typeArgument()
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 660
            self.match(JavaLangParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = JavaLangParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.entityType()
                pass
            elif token in [JavaLangParser.T__39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.match(JavaLangParser.T__39)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__7 or _la==JavaLangParser.T__40:
                    self.state = 664
                    _la = self._input.LA(1)
                    if not(_la==JavaLangParser.T__7 or _la==JavaLangParser.T__40):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 665
                    self.entityType()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = JavaLangParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.qualifiedName()
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 671
                self.match(JavaLangParser.T__16)
                self.state = 672
                self.qualifiedName()
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterDecls(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParameterDeclsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = JavaLangParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(JavaLangParser.T__41)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__48))) != 0) or _la==JavaLangParser.Identifier:
                self.state = 679
                self.formalParameterDecls()


            self.state = 682
            self.match(JavaLangParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterDeclsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableModifiers(self):
            return self.getTypedRuleContext(JavaLangParser.VariableModifiersContext,0)


        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def formalParameterDeclsRest(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParameterDeclsRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_formalParameterDecls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterDecls" ):
                listener.enterFormalParameterDecls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterDecls" ):
                listener.exitFormalParameterDecls(self)




    def formalParameterDecls(self):

        localctx = JavaLangParser.FormalParameterDeclsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_formalParameterDecls)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.variableModifiers()
            self.state = 685
            self.entityType()
            self.state = 686
            self.formalParameterDeclsRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterDeclsRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaLangParser.VariableDeclaratorIdContext,0)


        def formalParameterDecls(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParameterDeclsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_formalParameterDeclsRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterDeclsRest" ):
                listener.enterFormalParameterDeclsRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterDeclsRest" ):
                listener.exitFormalParameterDeclsRest(self)




    def formalParameterDeclsRest(self):

        localctx = JavaLangParser.FormalParameterDeclsRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_formalParameterDeclsRest)
        self._la = 0 # Token type
        try:
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.variableDeclaratorId()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__16:
                    self.state = 689
                    self.match(JavaLangParser.T__16)
                    self.state = 690
                    self.formalParameterDecls()


                pass
            elif token in [JavaLangParser.T__43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.match(JavaLangParser.T__43)
                self.state = 694
                self.variableDeclaratorId()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaLangParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = JavaLangParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_methodBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicitConstructorInvocation(self):
            return self.getTypedRuleContext(JavaLangParser.ExplicitConstructorInvocationContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_constructorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorBody" ):
                listener.enterConstructorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorBody" ):
                listener.exitConstructorBody(self)




    def constructorBody(self):

        localctx = JavaLangParser.ConstructorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_constructorBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(JavaLangParser.T__19)
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 700
                self.explicitConstructorInvocation()


            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__1) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__19) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__28) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47) | (1 << JavaLangParser.T__48) | (1 << JavaLangParser.T__51) | (1 << JavaLangParser.T__53) | (1 << JavaLangParser.T__54) | (1 << JavaLangParser.T__55) | (1 << JavaLangParser.T__56) | (1 << JavaLangParser.T__58) | (1 << JavaLangParser.T__59) | (1 << JavaLangParser.T__60) | (1 << JavaLangParser.T__61) | (1 << JavaLangParser.T__62))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.ASSERT - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                self.state = 703
                self.blockStatement()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 709
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitConstructorInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaLangParser.ArgumentsContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaLangParser.NonWildcardTypeArgumentsContext,0)


        def primary(self):
            return self.getTypedRuleContext(JavaLangParser.PrimaryContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_explicitConstructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitConstructorInvocation" ):
                listener.enterExplicitConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitConstructorInvocation" ):
                listener.exitExplicitConstructorInvocation(self)




    def explicitConstructorInvocation(self):

        localctx = JavaLangParser.ExplicitConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_explicitConstructorInvocation)
        self._la = 0 # Token type
        try:
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__15:
                    self.state = 711
                    self.nonWildcardTypeArguments()


                self.state = 714
                _la = self._input.LA(1)
                if not(_la==JavaLangParser.T__40 or _la==JavaLangParser.T__44):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 715
                self.arguments()
                self.state = 716
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.primary()
                self.state = 719
                self.match(JavaLangParser.T__4)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__15:
                    self.state = 720
                    self.nonWildcardTypeArguments()


                self.state = 723
                self.match(JavaLangParser.T__40)
                self.state = 724
                self.arguments()
                self.state = 725
                self.match(JavaLangParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaLangParser.Identifier)
            else:
                return self.getToken(JavaLangParser.Identifier, i)

        def getRuleIndex(self):
            return JavaLangParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = JavaLangParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(JavaLangParser.Identifier)
            self.state = 734
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 730
                    self.match(JavaLangParser.T__4)
                    self.state = 731
                    self.match(JavaLangParser.Identifier) 
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaLangParser.IntegerLiteralContext,0)


        def FloatingPointLiteral(self):
            return self.getToken(JavaLangParser.FloatingPointLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(JavaLangParser.CharacterLiteral, 0)

        def StringLiteral(self):
            return self.getToken(JavaLangParser.StringLiteral, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(JavaLangParser.BooleanLiteralContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = JavaLangParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_literal)
        try:
            self.state = 743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.HexLiteral, JavaLangParser.DecimalLiteral, JavaLangParser.OctalLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.integerLiteral()
                pass
            elif token in [JavaLangParser.FloatingPointLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.match(JavaLangParser.FloatingPointLiteral)
                pass
            elif token in [JavaLangParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 739
                self.match(JavaLangParser.CharacterLiteral)
                pass
            elif token in [JavaLangParser.StringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 740
                self.match(JavaLangParser.StringLiteral)
                pass
            elif token in [JavaLangParser.T__46, JavaLangParser.T__47]:
                self.enterOuterAlt(localctx, 5)
                self.state = 741
                self.booleanLiteral()
                pass
            elif token in [JavaLangParser.T__45]:
                self.enterOuterAlt(localctx, 6)
                self.state = 742
                self.match(JavaLangParser.T__45)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteral(self):
            return self.getToken(JavaLangParser.HexLiteral, 0)

        def OctalLiteral(self):
            return self.getToken(JavaLangParser.OctalLiteral, 0)

        def DecimalLiteral(self):
            return self.getToken(JavaLangParser.DecimalLiteral, 0)

        def getRuleIndex(self):
            return JavaLangParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = JavaLangParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            _la = self._input.LA(1)
            if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (JavaLangParser.HexLiteral - 90)) | (1 << (JavaLangParser.DecimalLiteral - 90)) | (1 << (JavaLangParser.OctalLiteral - 90)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaLangParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = JavaLangParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            _la = self._input.LA(1)
            if not(_la==JavaLangParser.T__46 or _la==JavaLangParser.T__47):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations" ):
                listener.enterAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations" ):
                listener.exitAnnotations(self)




    def annotations(self):

        localctx = JavaLangParser.AnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 749
                self.annotation()
                self.state = 752 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaLangParser.T__48):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationName(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationNameContext,0)


        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaLangParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaLangParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = JavaLangParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(JavaLangParser.T__48)
            self.state = 755
            self.annotationName()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__41:
                self.state = 756
                self.match(JavaLangParser.T__41)
                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 757
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 758
                    self.elementValue()


                self.state = 761
                self.match(JavaLangParser.T__42)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaLangParser.Identifier)
            else:
                return self.getToken(JavaLangParser.Identifier, i)

        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationName" ):
                listener.enterAnnotationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationName" ):
                listener.exitAnnotationName(self)




    def annotationName(self):

        localctx = JavaLangParser.AnnotationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(JavaLangParser.Identifier)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__4:
                self.state = 765
                self.match(JavaLangParser.T__4)
                self.state = 766
                self.match(JavaLangParser.Identifier)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ElementValuePairContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)




    def elementValuePairs(self):

        localctx = JavaLangParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.elementValuePair()
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 773
                self.match(JavaLangParser.T__16)
                self.state = 774
                self.elementValuePair()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaLangParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = JavaLangParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(JavaLangParser.Identifier)
            self.state = 781
            self.match(JavaLangParser.T__26)
            self.state = 782
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaLangParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = JavaLangParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_elementValue)
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__24, JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.T__40, JavaLangParser.T__41, JavaLangParser.T__44, JavaLangParser.T__45, JavaLangParser.T__46, JavaLangParser.T__47, JavaLangParser.T__65, JavaLangParser.T__66, JavaLangParser.T__67, JavaLangParser.T__68, JavaLangParser.T__69, JavaLangParser.T__70, JavaLangParser.T__71, JavaLangParser.HexLiteral, JavaLangParser.DecimalLiteral, JavaLangParser.OctalLiteral, JavaLangParser.FloatingPointLiteral, JavaLangParser.CharacterLiteral, JavaLangParser.StringLiteral, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.expression(0)
                pass
            elif token in [JavaLangParser.T__48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.annotation()
                pass
            elif token in [JavaLangParser.T__19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 786
                self.elementValueArrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ElementValueContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = JavaLangParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(JavaLangParser.T__19)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__19) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47) | (1 << JavaLangParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                self.state = 790
                self.elementValue()
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 791
                        self.match(JavaLangParser.T__16)
                        self.state = 792
                        self.elementValue() 
                    self.state = 797
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)



            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__16:
                self.state = 800
                self.match(JavaLangParser.T__16)


            self.state = 803
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)




    def annotationTypeDeclaration(self):

        localctx = JavaLangParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(JavaLangParser.T__48)
            self.state = 806
            self.match(JavaLangParser.T__21)
            self.state = 807
            self.match(JavaLangParser.Identifier)
            self.state = 808
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)




    def annotationTypeBody(self):

        localctx = JavaLangParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(JavaLangParser.T__19)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__3) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__9) | (1 << JavaLangParser.T__10) | (1 << JavaLangParser.T__11) | (1 << JavaLangParser.T__12) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__14) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__27) | (1 << JavaLangParser.T__28) | (1 << JavaLangParser.T__29) | (1 << JavaLangParser.T__30) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__48))) != 0) or _la==JavaLangParser.ENUM or _la==JavaLangParser.Identifier:
                self.state = 811
                self.annotationTypeElementDeclaration()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(JavaLangParser.ModifiersContext,0)


        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationTypeElementRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaLangParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_annotationTypeElementDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.modifiers()
            self.state = 820
            self.annotationTypeElementRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationMethodOrConstantRestContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.ClassDeclarationContext,0)


        def normalInterfaceDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.NormalInterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationTypeDeclarationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)




    def annotationTypeElementRest(self):

        localctx = JavaLangParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_annotationTypeElementRest)
        self._la = 0 # Token type
        try:
            self.state = 842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.entityType()
                self.state = 823
                self.annotationMethodOrConstantRest()
                self.state = 824
                self.match(JavaLangParser.T__1)
                pass
            elif token in [JavaLangParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.classDeclaration()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__1:
                    self.state = 827
                    self.match(JavaLangParser.T__1)


                pass
            elif token in [JavaLangParser.T__21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 830
                self.normalInterfaceDeclaration()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__1:
                    self.state = 831
                    self.match(JavaLangParser.T__1)


                pass
            elif token in [JavaLangParser.ENUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 834
                self.enumDeclaration()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__1:
                    self.state = 835
                    self.match(JavaLangParser.T__1)


                pass
            elif token in [JavaLangParser.T__48]:
                self.enterOuterAlt(localctx, 5)
                self.state = 838
                self.annotationTypeDeclaration()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__1:
                    self.state = 839
                    self.match(JavaLangParser.T__1)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodOrConstantRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaLangParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaLangParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaLangParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)




    def annotationMethodRest(self):

        localctx = JavaLangParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(JavaLangParser.Identifier)
            self.state = 849
            self.match(JavaLangParser.T__41)
            self.state = 850
            self.match(JavaLangParser.T__42)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__49:
                self.state = 851
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationConstantRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaLangParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)




    def annotationConstantRest(self):

        localctx = JavaLangParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValue(self):
            return self.getTypedRuleContext(JavaLangParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = JavaLangParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(JavaLangParser.T__49)
            self.state = 857
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = JavaLangParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(JavaLangParser.T__19)
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__1) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__19) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__28) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47) | (1 << JavaLangParser.T__48) | (1 << JavaLangParser.T__51) | (1 << JavaLangParser.T__53) | (1 << JavaLangParser.T__54) | (1 << JavaLangParser.T__55) | (1 << JavaLangParser.T__56) | (1 << JavaLangParser.T__58) | (1 << JavaLangParser.T__59) | (1 << JavaLangParser.T__60) | (1 << JavaLangParser.T__61) | (1 << JavaLangParser.T__62))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.ASSERT - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                self.state = 860
                self.blockStatement()
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 866
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(JavaLangParser.LocalVariableDeclarationStatementContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.InterfaceDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaLangParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = JavaLangParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_blockStatement)
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.classDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self.interfaceDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 871
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = JavaLangParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.localVariableDeclaration()
            self.state = 875
            self.match(JavaLangParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableModifiers(self):
            return self.getTypedRuleContext(JavaLangParser.VariableModifiersContext,0)


        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaLangParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = JavaLangParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.variableModifiers()
            self.state = 878
            self.entityType()
            self.state = 879
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_variableModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifiers" ):
                listener.enterVariableModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifiers" ):
                listener.exitVariableModifiers(self)




    def variableModifiers(self):

        localctx = JavaLangParser.VariableModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_variableModifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__13 or _la==JavaLangParser.T__48:
                self.state = 881
                self.variableModifier()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.BlockContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.BlockContext,i)


        def ASSERT(self):
            return self.getToken(JavaLangParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ExpressionContext,i)


        def parExpression(self):
            return self.getTypedRuleContext(JavaLangParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.StatementContext,i)


        def forControl(self):
            return self.getTypedRuleContext(JavaLangParser.ForControlContext,0)


        def catches(self):
            return self.getTypedRuleContext(JavaLangParser.CatchesContext,0)


        def switchBlock(self):
            return self.getTypedRuleContext(JavaLangParser.SwitchBlockContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def statementExpression(self):
            return self.getTypedRuleContext(JavaLangParser.StatementExpressionContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = JavaLangParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 888
                self.match(JavaLangParser.ASSERT)
                self.state = 889
                self.expression(0)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.T__50:
                    self.state = 890
                    self.match(JavaLangParser.T__50)
                    self.state = 891
                    self.expression(0)


                self.state = 894
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                self.match(JavaLangParser.T__51)
                self.state = 897
                self.parExpression()
                self.state = 898
                self.statement()
                self.state = 901
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 899
                    self.match(JavaLangParser.T__52)
                    self.state = 900
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 903
                self.match(JavaLangParser.T__53)
                self.state = 904
                self.match(JavaLangParser.T__41)
                self.state = 905
                self.forControl()
                self.state = 906
                self.match(JavaLangParser.T__42)
                self.state = 907
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 909
                self.match(JavaLangParser.T__54)
                self.state = 910
                self.parExpression()
                self.state = 911
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 913
                self.match(JavaLangParser.T__55)
                self.state = 914
                self.statement()
                self.state = 915
                self.match(JavaLangParser.T__54)
                self.state = 916
                self.parExpression()
                self.state = 917
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 919
                self.match(JavaLangParser.T__56)
                self.state = 920
                self.block()
                self.state = 928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 921
                    self.catches()
                    self.state = 922
                    self.match(JavaLangParser.T__57)
                    self.state = 923
                    self.block()
                    pass

                elif la_ == 2:
                    self.state = 925
                    self.catches()
                    pass

                elif la_ == 3:
                    self.state = 926
                    self.match(JavaLangParser.T__57)
                    self.state = 927
                    self.block()
                    pass


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 930
                self.match(JavaLangParser.T__58)
                self.state = 931
                self.parExpression()
                self.state = 932
                self.switchBlock()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 934
                self.match(JavaLangParser.T__28)
                self.state = 935
                self.parExpression()
                self.state = 936
                self.block()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 938
                self.match(JavaLangParser.T__59)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                    self.state = 939
                    self.expression(0)


                self.state = 942
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 943
                self.match(JavaLangParser.T__60)
                self.state = 944
                self.expression(0)
                self.state = 945
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 947
                self.match(JavaLangParser.T__61)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.Identifier:
                    self.state = 948
                    self.match(JavaLangParser.Identifier)


                self.state = 951
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 952
                self.match(JavaLangParser.T__62)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaLangParser.Identifier:
                    self.state = 953
                    self.match(JavaLangParser.Identifier)


                self.state = 956
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 957
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 958
                self.statementExpression()
                self.state = 959
                self.match(JavaLangParser.T__1)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 961
                self.match(JavaLangParser.Identifier)
                self.state = 962
                self.match(JavaLangParser.T__50)
                self.state = 963
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_catches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatches" ):
                listener.enterCatches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatches" ):
                listener.exitCatches(self)




    def catches(self):

        localctx = JavaLangParser.CatchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_catches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.catchClause()
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__63:
                self.state = 967
                self.catchClause()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self):
            return self.getTypedRuleContext(JavaLangParser.FormalParameterContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaLangParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = JavaLangParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(JavaLangParser.T__63)
            self.state = 974
            self.match(JavaLangParser.T__41)
            self.state = 975
            self.formalParameter()
            self.state = 976
            self.match(JavaLangParser.T__42)
            self.state = 977
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableModifiers(self):
            return self.getTypedRuleContext(JavaLangParser.VariableModifiersContext,0)


        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaLangParser.VariableDeclaratorIdContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = JavaLangParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.variableModifiers()
            self.state = 980
            self.entityType()
            self.state = 981
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.SwitchLabelContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = JavaLangParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(JavaLangParser.T__19)
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 984
                    self.switchBlockStatementGroup() 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__49 or _la==JavaLangParser.T__64:
                self.state = 990
                self.switchLabel()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 996
            self.match(JavaLangParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockStatementGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = JavaLangParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 998
                    self.switchLabel()

                else:
                    raise NoViableAltException(self)
                self.state = 1001 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__1) | (1 << JavaLangParser.T__6) | (1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__19) | (1 << JavaLangParser.T__21) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__28) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47) | (1 << JavaLangParser.T__48) | (1 << JavaLangParser.T__51) | (1 << JavaLangParser.T__53) | (1 << JavaLangParser.T__54) | (1 << JavaLangParser.T__55) | (1 << JavaLangParser.T__56) | (1 << JavaLangParser.T__58) | (1 << JavaLangParser.T__59) | (1 << JavaLangParser.T__60) | (1 << JavaLangParser.T__61) | (1 << JavaLangParser.T__62))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.ASSERT - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                self.state = 1003
                self.blockStatement()
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(JavaLangParser.ConstantExpressionContext,0)


        def enumConstantName(self):
            return self.getTypedRuleContext(JavaLangParser.EnumConstantNameContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = JavaLangParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_switchLabel)
        try:
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.match(JavaLangParser.T__64)
                self.state = 1010
                self.constantExpression()
                self.state = 1011
                self.match(JavaLangParser.T__50)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self.match(JavaLangParser.T__64)
                self.state = 1014
                self.enumConstantName()
                self.state = 1015
                self.match(JavaLangParser.T__50)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1017
                self.match(JavaLangParser.T__49)
                self.state = 1018
                self.match(JavaLangParser.T__50)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForControlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaLangParser.EnhancedForControlContext,0)


        def forInit(self):
            return self.getTypedRuleContext(JavaLangParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(JavaLangParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = JavaLangParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__13) | (1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47) | (1 << JavaLangParser.T__48))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                    self.state = 1022
                    self.forInit()


                self.state = 1025
                self.match(JavaLangParser.T__1)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                    self.state = 1026
                    self.expression(0)


                self.state = 1029
                self.match(JavaLangParser.T__1)
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                    self.state = 1030
                    self.forUpdate()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaLangParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = JavaLangParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_forInit)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnhancedForControlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableModifiers(self):
            return self.getTypedRuleContext(JavaLangParser.VariableModifiersContext,0)


        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = JavaLangParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.variableModifiers()
            self.state = 1040
            self.entityType()
            self.state = 1041
            self.match(JavaLangParser.Identifier)
            self.state = 1042
            self.match(JavaLangParser.T__50)
            self.state = 1043
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForUpdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = JavaLangParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)




    def parExpression(self):

        localctx = JavaLangParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(JavaLangParser.T__41)
            self.state = 1048
            self.expression(0)
            self.state = 1049
            self.match(JavaLangParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = JavaLangParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.expression(0)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaLangParser.T__16:
                self.state = 1052
                self.match(JavaLangParser.T__16)
                self.state = 1053
                self.expression(0)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_statementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpression" ):
                listener.enterStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpression" ):
                listener.exitStatementExpression(self)




    def statementExpression(self):

        localctx = JavaLangParser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_statementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = JavaLangParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(JavaLangParser.PrimaryContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ExpressionContext,i)


        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def creator(self):
            return self.getTypedRuleContext(JavaLangParser.CreatorContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionListContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaLangParser.ArgumentsContext,0)


        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaLangParser.ExplicitGenericInvocationContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaLangParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1064
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1065
                _la = self._input.LA(1)
                if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaLangParser.T__66 - 67)) | (1 << (JavaLangParser.T__67 - 67)) | (1 << (JavaLangParser.T__68 - 67)) | (1 << (JavaLangParser.T__69 - 67)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1066
                self.expression(17)
                pass

            elif la_ == 3:
                self.state = 1067
                _la = self._input.LA(1)
                if not(_la==JavaLangParser.T__70 or _la==JavaLangParser.T__71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1068
                self.expression(16)
                pass

            elif la_ == 4:
                self.state = 1069
                self.match(JavaLangParser.T__41)
                self.state = 1070
                self.entityType()
                self.state = 1071
                self.match(JavaLangParser.T__42)
                self.state = 1072
                self.expression(15)
                pass

            elif la_ == 5:
                self.state = 1074
                self.match(JavaLangParser.T__65)
                self.state = 1075
                self.creator()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1202
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1078
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1079
                        _la = self._input.LA(1)
                        if not(_la==JavaLangParser.T__5 or _la==JavaLangParser.T__72 or _la==JavaLangParser.T__73):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1080
                        self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1081
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1082
                        _la = self._input.LA(1)
                        if not(_la==JavaLangParser.T__68 or _la==JavaLangParser.T__69):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1083
                        self.expression(13)
                        pass

                    elif la_ == 3:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1084
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1092
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                        if la_ == 1:
                            self.state = 1085
                            self.match(JavaLangParser.T__15)
                            self.state = 1086
                            self.match(JavaLangParser.T__15)
                            pass

                        elif la_ == 2:
                            self.state = 1087
                            self.match(JavaLangParser.T__17)
                            self.state = 1088
                            self.match(JavaLangParser.T__17)
                            self.state = 1089
                            self.match(JavaLangParser.T__17)
                            pass

                        elif la_ == 3:
                            self.state = 1090
                            self.match(JavaLangParser.T__17)
                            self.state = 1091
                            self.match(JavaLangParser.T__17)
                            pass


                        self.state = 1094
                        self.expression(12)
                        pass

                    elif la_ == 4:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1095
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1102
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                        if la_ == 1:
                            self.state = 1096
                            self.match(JavaLangParser.T__15)
                            self.state = 1097
                            self.match(JavaLangParser.T__26)
                            pass

                        elif la_ == 2:
                            self.state = 1098
                            self.match(JavaLangParser.T__17)
                            self.state = 1099
                            self.match(JavaLangParser.T__26)
                            pass

                        elif la_ == 3:
                            self.state = 1100
                            self.match(JavaLangParser.T__17)
                            pass

                        elif la_ == 4:
                            self.state = 1101
                            self.match(JavaLangParser.T__15)
                            pass


                        self.state = 1104
                        self.expression(11)
                        pass

                    elif la_ == 5:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1105
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1106
                        _la = self._input.LA(1)
                        if not(_la==JavaLangParser.T__75 or _la==JavaLangParser.T__76):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1107
                        self.expression(9)
                        pass

                    elif la_ == 6:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1108
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1109
                        self.match(JavaLangParser.T__18)
                        self.state = 1110
                        self.expression(8)
                        pass

                    elif la_ == 7:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1111
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1112
                        self.match(JavaLangParser.T__77)
                        self.state = 1113
                        self.expression(7)
                        pass

                    elif la_ == 8:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1114
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1115
                        self.match(JavaLangParser.T__78)
                        self.state = 1116
                        self.expression(6)
                        pass

                    elif la_ == 9:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1117
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1118
                        self.match(JavaLangParser.T__79)
                        self.state = 1119
                        self.expression(5)
                        pass

                    elif la_ == 10:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1120
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1121
                        self.match(JavaLangParser.T__80)
                        self.state = 1122
                        self.expression(4)
                        pass

                    elif la_ == 11:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1123
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1124
                        self.match(JavaLangParser.T__39)
                        self.state = 1125
                        self.expression(0)
                        self.state = 1126
                        self.match(JavaLangParser.T__50)
                        self.state = 1127
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1129
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1149
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 1130
                            self.match(JavaLangParser.T__81)
                            pass

                        elif la_ == 2:
                            self.state = 1131
                            self.match(JavaLangParser.T__82)
                            pass

                        elif la_ == 3:
                            self.state = 1132
                            self.match(JavaLangParser.T__83)
                            pass

                        elif la_ == 4:
                            self.state = 1133
                            self.match(JavaLangParser.T__84)
                            pass

                        elif la_ == 5:
                            self.state = 1134
                            self.match(JavaLangParser.T__85)
                            pass

                        elif la_ == 6:
                            self.state = 1135
                            self.match(JavaLangParser.T__86)
                            pass

                        elif la_ == 7:
                            self.state = 1136
                            self.match(JavaLangParser.T__87)
                            pass

                        elif la_ == 8:
                            self.state = 1137
                            self.match(JavaLangParser.T__26)
                            pass

                        elif la_ == 9:
                            self.state = 1138
                            self.match(JavaLangParser.T__17)
                            self.state = 1139
                            self.match(JavaLangParser.T__17)
                            self.state = 1140
                            self.match(JavaLangParser.T__26)
                            pass

                        elif la_ == 10:
                            self.state = 1141
                            self.match(JavaLangParser.T__17)
                            self.state = 1142
                            self.match(JavaLangParser.T__17)
                            self.state = 1143
                            self.match(JavaLangParser.T__17)
                            self.state = 1144
                            self.match(JavaLangParser.T__26)
                            pass

                        elif la_ == 11:
                            self.state = 1145
                            self.match(JavaLangParser.T__15)
                            self.state = 1146
                            self.match(JavaLangParser.T__15)
                            self.state = 1147
                            self.match(JavaLangParser.T__26)
                            pass

                        elif la_ == 12:
                            self.state = 1148
                            self.match(JavaLangParser.T__88)
                            pass


                        self.state = 1151
                        self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1152
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1153
                        self.match(JavaLangParser.T__4)
                        self.state = 1154
                        self.match(JavaLangParser.Identifier)
                        pass

                    elif la_ == 14:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1155
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1156
                        self.match(JavaLangParser.T__4)
                        self.state = 1157
                        self.match(JavaLangParser.T__44)
                        pass

                    elif la_ == 15:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1158
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1159
                        self.match(JavaLangParser.T__4)
                        self.state = 1160
                        self.match(JavaLangParser.T__40)
                        self.state = 1161
                        self.match(JavaLangParser.T__41)
                        self.state = 1163
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                            self.state = 1162
                            self.expressionList()


                        self.state = 1165
                        self.match(JavaLangParser.T__42)
                        pass

                    elif la_ == 16:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1166
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1167
                        self.match(JavaLangParser.T__4)
                        self.state = 1168
                        self.match(JavaLangParser.T__65)
                        self.state = 1169
                        self.match(JavaLangParser.Identifier)
                        self.state = 1170
                        self.match(JavaLangParser.T__41)
                        self.state = 1172
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                            self.state = 1171
                            self.expressionList()


                        self.state = 1174
                        self.match(JavaLangParser.T__42)
                        pass

                    elif la_ == 17:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1175
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1176
                        self.match(JavaLangParser.T__4)
                        self.state = 1177
                        self.match(JavaLangParser.T__40)
                        self.state = 1178
                        self.match(JavaLangParser.T__4)
                        self.state = 1179
                        self.match(JavaLangParser.Identifier)
                        self.state = 1181
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                        if la_ == 1:
                            self.state = 1180
                            self.arguments()


                        pass

                    elif la_ == 18:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1183
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1184
                        self.match(JavaLangParser.T__4)
                        self.state = 1185
                        self.explicitGenericInvocation()
                        pass

                    elif la_ == 19:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1186
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1187
                        self.match(JavaLangParser.T__22)
                        self.state = 1188
                        self.expression(0)
                        self.state = 1189
                        self.match(JavaLangParser.T__23)
                        pass

                    elif la_ == 20:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1191
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1192
                        self.match(JavaLangParser.T__41)
                        self.state = 1194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                            self.state = 1193
                            self.expressionList()


                        self.state = 1196
                        self.match(JavaLangParser.T__42)
                        pass

                    elif la_ == 21:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1197
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1198
                        _la = self._input.LA(1)
                        if not(_la==JavaLangParser.T__66 or _la==JavaLangParser.T__67):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 22:
                        localctx = JavaLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1199
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1200
                        self.match(JavaLangParser.T__74)
                        self.state = 1201
                        self.entityType()
                        pass

             
                self.state = 1206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(JavaLangParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def entityType(self):
            return self.getTypedRuleContext(JavaLangParser.EntityTypeContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = JavaLangParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_primary)
        try:
            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1207
                self.match(JavaLangParser.T__41)
                self.state = 1208
                self.expression(0)
                self.state = 1209
                self.match(JavaLangParser.T__42)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.match(JavaLangParser.T__44)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.match(JavaLangParser.T__40)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1213
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1214
                self.match(JavaLangParser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1215
                self.entityType()
                self.state = 1216
                self.match(JavaLangParser.T__4)
                self.state = 1217
                self.match(JavaLangParser.T__6)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1219
                self.match(JavaLangParser.T__24)
                self.state = 1220
                self.match(JavaLangParser.T__4)
                self.state = 1221
                self.match(JavaLangParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaLangParser.NonWildcardTypeArgumentsContext,0)


        def createdName(self):
            return self.getTypedRuleContext(JavaLangParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaLangParser.ClassCreatorRestContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaLangParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = JavaLangParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_creator)
        try:
            self.state = 1233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1224
                self.nonWildcardTypeArguments()
                self.state = 1225
                self.createdName()
                self.state = 1226
                self.classCreatorRest()
                pass
            elif token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1228
                self.createdName()
                self.state = 1231
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaLangParser.T__22]:
                    self.state = 1229
                    self.arrayCreatorRest()
                    pass
                elif token in [JavaLangParser.T__41]:
                    self.state = 1230
                    self.classCreatorRest()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaLangParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaLangParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = JavaLangParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_createdName)
        try:
            self.state = 1237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1235
                self.classOrInterfaceType()
                pass
            elif token in [JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1236
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerCreatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaLangParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaLangParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)




    def innerCreator(self):

        localctx = JavaLangParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaLangParser.T__15:
                self.state = 1239
                self.nonWildcardTypeArguments()


            self.state = 1242
            self.match(JavaLangParser.Identifier)
            self.state = 1243
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaLangParser.NonWildcardTypeArgumentsContext,0)


        def Identifier(self):
            return self.getToken(JavaLangParser.Identifier, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaLangParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)




    def explicitGenericInvocation(self):

        localctx = JavaLangParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.nonWildcardTypeArguments()
            self.state = 1246
            self.match(JavaLangParser.Identifier)
            self.state = 1247
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayCreatorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaLangParser.ArrayInitializerContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaLangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaLangParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = JavaLangParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.match(JavaLangParser.T__22)
            self.state = 1277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaLangParser.T__23]:
                self.state = 1250
                self.match(JavaLangParser.T__23)
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaLangParser.T__22:
                    self.state = 1251
                    self.match(JavaLangParser.T__22)
                    self.state = 1252
                    self.match(JavaLangParser.T__23)
                    self.state = 1257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1258
                self.arrayInitializer()
                pass
            elif token in [JavaLangParser.T__24, JavaLangParser.T__31, JavaLangParser.T__32, JavaLangParser.T__33, JavaLangParser.T__34, JavaLangParser.T__35, JavaLangParser.T__36, JavaLangParser.T__37, JavaLangParser.T__38, JavaLangParser.T__40, JavaLangParser.T__41, JavaLangParser.T__44, JavaLangParser.T__45, JavaLangParser.T__46, JavaLangParser.T__47, JavaLangParser.T__65, JavaLangParser.T__66, JavaLangParser.T__67, JavaLangParser.T__68, JavaLangParser.T__69, JavaLangParser.T__70, JavaLangParser.T__71, JavaLangParser.HexLiteral, JavaLangParser.DecimalLiteral, JavaLangParser.OctalLiteral, JavaLangParser.FloatingPointLiteral, JavaLangParser.CharacterLiteral, JavaLangParser.StringLiteral, JavaLangParser.Identifier]:
                self.state = 1259
                self.expression(0)
                self.state = 1260
                self.match(JavaLangParser.T__23)
                self.state = 1267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1261
                        self.match(JavaLangParser.T__22)
                        self.state = 1262
                        self.expression(0)
                        self.state = 1263
                        self.match(JavaLangParser.T__23) 
                    self.state = 1269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 1274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1270
                        self.match(JavaLangParser.T__22)
                        self.state = 1271
                        self.match(JavaLangParser.T__23) 
                    self.state = 1276
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassCreatorRestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaLangParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaLangParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = JavaLangParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.arguments()
            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1280
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeList(self):
            return self.getTypedRuleContext(JavaLangParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaLangParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(JavaLangParser.T__15)
            self.state = 1284
            self.typeList()
            self.state = 1285
            self.match(JavaLangParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(JavaLangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaLangParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = JavaLangParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(JavaLangParser.T__41)
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaLangParser.T__24) | (1 << JavaLangParser.T__31) | (1 << JavaLangParser.T__32) | (1 << JavaLangParser.T__33) | (1 << JavaLangParser.T__34) | (1 << JavaLangParser.T__35) | (1 << JavaLangParser.T__36) | (1 << JavaLangParser.T__37) | (1 << JavaLangParser.T__38) | (1 << JavaLangParser.T__40) | (1 << JavaLangParser.T__41) | (1 << JavaLangParser.T__44) | (1 << JavaLangParser.T__45) | (1 << JavaLangParser.T__46) | (1 << JavaLangParser.T__47))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (JavaLangParser.T__65 - 66)) | (1 << (JavaLangParser.T__66 - 66)) | (1 << (JavaLangParser.T__67 - 66)) | (1 << (JavaLangParser.T__68 - 66)) | (1 << (JavaLangParser.T__69 - 66)) | (1 << (JavaLangParser.T__70 - 66)) | (1 << (JavaLangParser.T__71 - 66)) | (1 << (JavaLangParser.HexLiteral - 66)) | (1 << (JavaLangParser.DecimalLiteral - 66)) | (1 << (JavaLangParser.OctalLiteral - 66)) | (1 << (JavaLangParser.FloatingPointLiteral - 66)) | (1 << (JavaLangParser.CharacterLiteral - 66)) | (1 << (JavaLangParser.StringLiteral - 66)) | (1 << (JavaLangParser.Identifier - 66)))) != 0):
                self.state = 1288
                self.expressionList()


            self.state = 1291
            self.match(JavaLangParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[99] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 9)
         




